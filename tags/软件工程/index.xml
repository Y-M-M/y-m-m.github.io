<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件工程 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
    <description>Recent content in 软件工程 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Apr 2025 21:57:57 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件工程</title>
      <link>https://y-m-m.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;第一章-软件工程概述&#34;&gt;第一章 软件工程概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-计算机软件&#34;&gt;1.1 计算机软件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件的定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合&lt;/li&gt;&#xA;&lt;li&gt;程序是按事先设计的功能和性能要求执行的指令序列；&lt;/li&gt;&#xA;&lt;li&gt;数据是使程序能正常操纵信息的数据结构；&lt;/li&gt;&#xA;&lt;li&gt;文档是与程序开发，维护和使用有关的图文材料&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件是一种逻辑实体，具有抽象性&lt;/li&gt;&#xA;&lt;li&gt;软件的开发是一种逻辑思维成熟的过程，无明显制造过程&lt;/li&gt;&#xA;&lt;li&gt;在软件的运行和使用期间，没有硬件那样的机械磨损，老化问题，但却存在退化问题&lt;/li&gt;&#xA;&lt;li&gt;软件的开发依然很原始，至今尚未完全摆脱手工艺的开发方式&lt;/li&gt;&#xA;&lt;li&gt;软件是高度复杂的逻辑体&lt;/li&gt;&#xA;&lt;li&gt;软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性&lt;/li&gt;&#xA;&lt;li&gt;软件成本相当昂贵&lt;/li&gt;&#xA;&lt;li&gt;相当多的软件工作涉及到社会因素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;12-软件的发展和软件危机&#34;&gt;1.2 软件的发展和软件危机&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件发展阶段&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序设计阶段： 20世纪50至60年代&lt;/li&gt;&#xA;&lt;li&gt;程序系统阶段： 20世纪60至70年代&lt;/li&gt;&#xA;&lt;li&gt;传统软件工程阶段：20世纪70～90年代&lt;/li&gt;&#xA;&lt;li&gt;现代软件工程阶段：20世纪90年代至今&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2020.10.06.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;最根本的变化&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人们对软件有了新的认识&lt;/li&gt;&#xA;&lt;li&gt;软件需求是软件发展的动力&lt;/li&gt;&#xA;&lt;li&gt;软件工作的范围从只考虑程序的编写扩展到涉及整个软件生存期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发的高成本与软件产品的低质量之间的尖锐矛盾(软件技术发展第二阶段)&lt;/li&gt;&#xA;&lt;li&gt;软件危机（Software Crisis）：指由于落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机的表现&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发计划难以制订&lt;/li&gt;&#xA;&lt;li&gt;软件开发费用和进度失控&lt;/li&gt;&#xA;&lt;li&gt;软件产品无法让用户满意&lt;/li&gt;&#xA;&lt;li&gt;软件产品的质量难以保证&lt;/li&gt;&#xA;&lt;li&gt;软件通常没有适当的文档资料&lt;/li&gt;&#xA;&lt;li&gt;软件通常是不可维护的&lt;/li&gt;&#xA;&lt;li&gt;软件成本在计算机系统总成本中所占比例逐年上升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机产生的内在原因&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生产本身存在着复杂性&lt;/li&gt;&#xA;&lt;li&gt;软件开发和维护所使用的方法不合理&lt;/li&gt;&#xA;&lt;li&gt;解决途径：软件工程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;13-软件工程&#34;&gt;1.3 软件工程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要思想：按照工程化的原理、原则和方法开发、运行、维护软件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程是工程概念在软件领域里的一个特定应用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工程：将科学及数学原理运用于实际用途的应用手段，如：设计、制造、机器操纵、构架、系统等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程涉及软件产品的所有环节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程三要素&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为软件开发提供了“如何做”的技术。它包括了多方面的任务，如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为软件工程方法提供了自动的或半自动的软件支撑环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程的过程则是将软件工程的方法和工具综合起来以达到合理、及时地进行计算机软件开发的目的。过程定义了方法使用的顺序、要求交付的文档资料、为保证质量和协调变化所需要的管理、及软件开发各个阶段完成的里程碑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程的目标&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在给定成本、进度的前提下，开发出满足用户需求且具有 可修改性、有效性、可靠性、可理解性、可维护性、可重用性、可适应性、可移植性、可追踪性和可互操作性 的软件产品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程研究内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发方法学、开发过程模型、开发工具和软件工程环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件管理学、软件工程经济学、软件心理学等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程四条基本原则&#xA;&lt;ul&gt;&#xA;&lt;li&gt;选取适宜的开发模型&lt;/li&gt;&#xA;&lt;li&gt;采用合适的设计方法&lt;/li&gt;&#xA;&lt;li&gt;提供高质量的工程支持&lt;/li&gt;&#xA;&lt;li&gt;重视开发过程的管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程的一般原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;抽象&lt;/li&gt;&#xA;&lt;li&gt;信息隐藏&lt;/li&gt;&#xA;&lt;li&gt;模块化&lt;/li&gt;&#xA;&lt;li&gt;局部化&lt;/li&gt;&#xA;&lt;li&gt;确定性&lt;/li&gt;&#xA;&lt;li&gt;一致性&lt;/li&gt;&#xA;&lt;li&gt;完备性&lt;/li&gt;&#xA;&lt;li&gt;可验证性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程基本原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用分阶段的生命周期计划严格管理&lt;/li&gt;&#xA;&lt;li&gt;坚持进行阶段评审&lt;/li&gt;&#xA;&lt;li&gt;实行严格的产品控制(控制需求变动的影响)&lt;/li&gt;&#xA;&lt;li&gt;采用现代程序设计技术&lt;/li&gt;&#xA;&lt;li&gt;结果应能清楚地审查&lt;/li&gt;&#xA;&lt;li&gt;开发小组人员应少而精&lt;/li&gt;&#xA;&lt;li&gt;承认不断改进软件工程实践的意义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;14-软件工程知识体系&#34;&gt;1.4 软件工程知识体系&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程知识体系指南&lt;/li&gt;&#xA;&lt;li&gt;建立软件工程知识体系的一个目的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;促进世界范围内对软件工程的一致观点&lt;/li&gt;&#xA;&lt;li&gt;阐明软件工程相对其他学科(如计算机科学、项目管理、计算机工程和数学等)的关系，并确立它们的界线&lt;/li&gt;&#xA;&lt;li&gt;确定软件工程学科的内容&lt;/li&gt;&#xA;&lt;li&gt;确定软件工程本体知识的各个专题&lt;/li&gt;&#xA;&lt;li&gt;为相应的课程和职业资格认证材料的编写奠定基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程知识体系知识域&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件需求&lt;/li&gt;&#xA;&lt;li&gt;软件设计&lt;/li&gt;&#xA;&lt;li&gt;软件构造&lt;/li&gt;&#xA;&lt;li&gt;软件测试&lt;/li&gt;&#xA;&lt;li&gt;软件维护&lt;/li&gt;&#xA;&lt;li&gt;软件配置管理&lt;/li&gt;&#xA;&lt;li&gt;软件工程管理&lt;/li&gt;&#xA;&lt;li&gt;软件工程过程&lt;/li&gt;&#xA;&lt;li&gt;软件工程工具和方法&lt;/li&gt;&#xA;&lt;li&gt;软件质量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第二章-软件生命周期模型&#34;&gt;第二章 软件生命周期模型&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21-软件工程过程&#34;&gt;2.1 软件工程过程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工程项目的PDCA循环（戴明环）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;即Plan（规划）、Do（执行）、Check（检查）、Action（处理）等抽象活动的循环&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2020.48.01.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P(Plan) 软件规格说明&lt;/li&gt;&#xA;&lt;li&gt;D(Do) 软件开发&lt;/li&gt;&#xA;&lt;li&gt;C(Check) 软件确认&lt;/li&gt;&#xA;&lt;li&gt;A(Action) 软件演进&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;22-软件生命周期&#34;&gt;2.2 软件生命周期&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生命周期(software life cycle )是指软件产品从考虑其概念开始，到该软件产品不再使用为止的整个时期，一般包括概念阶段、分析与设计阶段、构造阶段、移交阶段等不同时期。&lt;/li&gt;&#xA;&lt;li&gt;六个基本活动&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指定计划 P&lt;/li&gt;&#xA;&lt;li&gt;需求分析和定义 D&lt;/li&gt;&#xA;&lt;li&gt;软件设计 D&lt;/li&gt;&#xA;&lt;li&gt;程序编写 D&lt;/li&gt;&#xA;&lt;li&gt;软件测试 C&lt;/li&gt;&#xA;&lt;li&gt;运行/维护 A&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;23-软件传统生命周期模型&#34;&gt;2.3 软件传统生命周期模型&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;瀑布模型&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.24.21.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义阶段、开发阶段和维护阶段&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型中的每一个开发活动具有下列特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本活动的工作对象来自于上一项活动的输出&lt;/li&gt;&#xA;&lt;li&gt;根据本阶段的活动规程执行相应的任务&lt;/li&gt;&#xA;&lt;li&gt;产生本阶段活动相关产出—软件工件，作为下一活动的输入&lt;/li&gt;&#xA;&lt;li&gt;对本阶段活动执行情况进行评审&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型中的运行/维护活动，是一个具有最长生命周期的循环往复阶段&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.26.28.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生命周期的阶段划分不仅降低了软件开发的复杂程度，而且提高了软件开发过程的透明性，便于将软件工程过程和软件管理过程有机地融合在一起，从而提高软件开发过程的可管理性&lt;/li&gt;&#xA;&lt;li&gt;推迟了软件实现，强调在软件实现前必须进行分析和设计工作&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型以项目的阶段评审和文档控制为手段有效地对整个开发过程进行指导，保证了阶段之间的正确衔接，能够及时发现并纠正开发过程中存在的缺陷，从而能够使产品达到预期的质量要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型的缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模型缺乏灵活性，特别是无法解决软件需求不明确或不准确的问题，这是瀑布模型最突出的缺点。因此，瀑布模型只适合于&lt;strong&gt;需求明确&lt;/strong&gt;的软件项目&lt;/li&gt;&#xA;&lt;li&gt;模型的风险控制能力较弱。成品时间长；体系结构的风险和错误只有在测试阶段才能发现，返工导致项目延期&lt;/li&gt;&#xA;&lt;li&gt;软件活动是文档驱动的，文档过多会增加工作量，文档完成情况会误导管理人员&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;V模型和W模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;V模型——瀑布模型的变种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;V模型的价值在于纠正了人们不重视测试阶段重要性的错误认识，将测试分等级，并和前面的开发阶段对应起来&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.32.09.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;W模型——瀑布模型的变种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将测试广义化，增加了确认和验证内容，并贯穿整个软件生命周期&lt;/li&gt;&#xA;&lt;li&gt;W模型由两个V型模型组成，分别代表测试与开发过程 ，两个过程是同步进行的&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.33.10.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是指模拟某种产品的原始模型。软件原型是一个早期可以运行的版本，它反映最终系统的部分重要特性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法构造软件系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获得一组基本的需求说明，快速分析构造出一个小型的软件系统，满足用户的基本要求&lt;/li&gt;&#xA;&lt;li&gt;用户试用原型系统，对其进行反应和评价&lt;/li&gt;&#xA;&lt;li&gt;开发者根据用户意见对原型进行改进，获得新的原型版本&lt;/li&gt;&#xA;&lt;li&gt;周而复始，直到产品满足用户的要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型化方法是在研究需求分析技术的过程中产生的，但也可以用于软件开发的其他阶段&lt;/li&gt;&#xA;&lt;li&gt;原型的种类(根据目的划分)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;探索型：弄清对目标系统的要求&lt;/li&gt;&#xA;&lt;li&gt;实验型：系统实现前考察系统的可行性&lt;/li&gt;&#xA;&lt;li&gt;进化型：将原型扩展到开发过程，通过原型开发逐步实现所有系统功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型的使用策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;废弃策略：探索型和实验型&lt;/li&gt;&#xA;&lt;li&gt;追加策略：进化型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型不同于最终的系统，需要快速实现和运行，因此，原型可以忽略一切暂时不必关心的部分（抽象）&lt;/li&gt;&#xA;&lt;li&gt;原型方法的优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有助于增进软件人员和用户对系统服务需求的理解&lt;/li&gt;&#xA;&lt;li&gt;提供了一种有力的学习手段&lt;/li&gt;&#xA;&lt;li&gt;容易确定系统的性能、服务的可应用性、设计的可行性和产品的结果&lt;/li&gt;&#xA;&lt;li&gt;原型的最终版本可作为最终产品或最终系统的一部分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法的缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;文档容易被忽略&lt;/li&gt;&#xA;&lt;li&gt;建立原型的许多工作会被浪费掉&lt;/li&gt;&#xA;&lt;li&gt;项目难以规划和管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法应用过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.38.32.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;原型方法支持的软件生命周期&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原型方法可以支持软件生命周期的不同阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;辅助或代替分析阶段 (确定需求)&lt;/li&gt;&#xA;&lt;li&gt;辅助设计阶段 (确定设计方案的合理性)&lt;/li&gt;&#xA;&lt;li&gt;代替分析与设计阶段&lt;/li&gt;&#xA;&lt;li&gt;代替分析、设计和实现阶段&lt;/li&gt;&#xA;&lt;li&gt;代替全部开发阶段 (典型的演化模型 )&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.41.00.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;演化模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发“两次”后的软件能较好地满足用户的要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一次：试验开发，目的是探索可行性，弄清楚项目的需求。第一次得到的试验性产品称为“原型”&lt;/li&gt;&#xA;&lt;li&gt;第二次：在第一次的原型基础上进行开发，从而获得较为满意的软件产品&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.42.33.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;演化模型主要针对需求不是很明确的软件项目&lt;/li&gt;&#xA;&lt;li&gt;演化模型缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可能会抛弃瀑布模型的文档控制优点，开发过程不透明&lt;/li&gt;&#xA;&lt;li&gt;探索式演化模型可能会导致最后的软件系统的系统结构较差&lt;/li&gt;&#xA;&lt;li&gt;可能会用到一些不符合主流、不符合要求或者不成熟的工具和技术&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增量模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;结合了瀑布模型和演化模型的优点&lt;/li&gt;&#xA;&lt;li&gt;过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户定义需求框架，确定系统需求实现的优先级&lt;/li&gt;&#xA;&lt;li&gt;此后针对核心需求以及系统的性能要求确定系统的体系结构，并以此体系结构指导增量的集成，保证在整个开发过程中体系结构的稳定性&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.44.53.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增量模型优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增强了客户使用系统的信心，逐步提出对后续增量的需求&lt;/li&gt;&#xA;&lt;li&gt;项目总体失败的风险较低&lt;/li&gt;&#xA;&lt;li&gt;增量从高到低的优先级确定保障了系统重要功能部分的可靠性&lt;/li&gt;&#xA;&lt;li&gt;同一个体系结构提高了系统的稳定性和可维护性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增量模型缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增量的粒度选择问题&lt;/li&gt;&#xA;&lt;li&gt;确定所有的基本业务服务比较困难&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;螺旋模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;针对大型软件项目&lt;/li&gt;&#xA;&lt;li&gt;将瀑布模型和演化模型结合起来，并加入了风险分析&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.49.11.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;螺旋模型沿着螺线旋转，在四个象限上分别表达了四个方面的活动，即：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;制定计划──确定软件目标，选定实施方案，弄清项目开发的限制条件&lt;/li&gt;&#xA;&lt;li&gt;风险分析──分析所选方案，考虑如何识别和消除风险&lt;/li&gt;&#xA;&lt;li&gt;实施工程──实施软件开发&lt;/li&gt;&#xA;&lt;li&gt;客户评估──评价开发工作，提出修正建议&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;螺旋模型适合于大型软件的开发;然而风险分析需要相当丰富的评估经验，风险的规避又需要深厚的专业知识，这给螺旋模型的应用增加了难度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;喷泉模型(迭代模型)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发过程具有两个固有的本质特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;迭代&lt;/li&gt;&#xA;&lt;li&gt;无间隙&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;适用于面向对象的软件开发过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.52.28.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;构件组装模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本质上是演化的，开发过程是迭代的&lt;/li&gt;&#xA;&lt;li&gt;五个阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需求定义和分析&lt;/li&gt;&#xA;&lt;li&gt;软件体系结构设计&lt;/li&gt;&#xA;&lt;li&gt;构件开发&lt;/li&gt;&#xA;&lt;li&gt;应用软件构造&lt;/li&gt;&#xA;&lt;li&gt;测试和发布&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.53.33.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件开发的步骤过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义和分析需求&lt;/li&gt;&#xA;&lt;li&gt;标识本项目需要什么构件&lt;/li&gt;&#xA;&lt;li&gt;从库中查找构件或相似的构件&lt;/li&gt;&#xA;&lt;li&gt;如果可用转下一条，否则自行开发或修改，确认后入库；&lt;/li&gt;&#xA;&lt;li&gt;构造为新系统作第m次迭代；&lt;/li&gt;&#xA;&lt;li&gt;测试、确认&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;快速应用开发(RAD)模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;快速应用开发(Rapid Application Development，RAD)是一个增量型的软件开发过程模型，采用构件组装方法进行快速开发&lt;/li&gt;&#xA;&lt;li&gt;包含如下阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务建模：通过捕获业务过程中信息流的流动及处理情况描述业务处理系统应该完成的功能&lt;/li&gt;&#xA;&lt;li&gt;数据建模：对于支持业务过程的数据流，建立数据对象集合,定义数据对象属性,与其它数据对象的关系构成数据模型，可辅之以E-R图&lt;/li&gt;&#xA;&lt;li&gt;过程建模：定义如何使数据对象在信息流中完成各业务功能&lt;/li&gt;&#xA;&lt;li&gt;应用生成：利用第四代语言(4GL)写出处理程序，重用已有构件或创建新的可重用构件，利用环境提供的工具，自动生成，构造出整个的应用系统&lt;/li&gt;&#xA;&lt;li&gt;测试及迭代：由于大量重用，一般只作总体测试，但新创建的构件还是要测试的。当一轮需求完成快速开发后，可以迭代进入下一轮需求的开发&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.56.58.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;24-新型软件生命周期模型&#34;&gt;2.4 新型软件生命周期模型&lt;/h2&gt;&#xA;&lt;h1 id=&#34;第五章-软件设计&#34;&gt;第五章 软件设计&lt;/h1&gt;&#xA;&lt;h2 id=&#34;51-软件设计概述&#34;&gt;5.1 软件设计概述&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目标&#xA;&lt;ul&gt;&#xA;&lt;li&gt;概括地描述系统如何实现用户所提出来的功能和性能等方面的需求&lt;/li&gt;&#xA;&lt;li&gt;根据软件需求分析的结果，设想并设计软件，即根据目标系统的逻辑模型确定目标系统的物理模型&lt;/li&gt;&#xA;&lt;li&gt;包括&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件体系结构设计&lt;/li&gt;&#xA;&lt;li&gt;处理方式设计&lt;/li&gt;&#xA;&lt;li&gt;数据结构和数据存储设计&lt;/li&gt;&#xA;&lt;li&gt;界面和可靠性设计&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-18%2015.49.21.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;重要性&lt;/li&gt;&#xA;&lt;li&gt;历史和变迁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;52-软件概要设计的步骤&#34;&gt;5.2 软件概要设计的步骤&lt;/h2&gt;&#xA;&lt;h2 id=&#34;53-软件详细设计的步骤&#34;&gt;5.3 软件详细设计的步骤&lt;/h2&gt;&#xA;&lt;h2 id=&#34;54-软件设计模型&#34;&gt;5.4 软件设计模型&lt;/h2&gt;&#xA;&lt;h3 id=&#34;软件设计模型的结构&#34;&gt;软件设计模型的结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件设计模型由&lt;strong&gt;静态模型&lt;/strong&gt;和&lt;strong&gt;动态结构&lt;/strong&gt;组成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态结构：功能结构、数据结构&lt;/li&gt;&#xA;&lt;li&gt;动态结构：以某种方式表示功能响应需求时处理数据的过程或条件，用于进一步解释软件结构中个功能之间如何协调工作的机制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件设计模型取决于需求分析结果模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向对象方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能结构&amp;lt;-&amp;gt;用例模型(功能图)&lt;/li&gt;&#xA;&lt;li&gt;数据结构&amp;lt;-&amp;gt;领域模型(类图，类和类的关联关系，属性)&lt;/li&gt;&#xA;&lt;li&gt;动态结构&amp;lt;-&amp;gt;领域模型中表示业务流程的活动图&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;结构化方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能结构&amp;lt;-&amp;gt;数据流图&lt;/li&gt;&#xA;&lt;li&gt;数据结构&amp;lt;-&amp;gt;实体关系图&lt;/li&gt;&#xA;&lt;li&gt;动态结构&amp;lt;-&amp;gt;状态迁移图&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;55-软件设计原则&#34;&gt;5.5 软件设计原则&lt;/h2&gt;&#xA;&lt;h3 id=&#34;模块化&#34;&gt;模块化&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模块的定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;又称构件，在传统的方法中指用一个名字就可调用的一段程序，或者可单独命名且可编址的软件组成部分&lt;/li&gt;&#xA;&lt;li&gt;类似于高级语言中的过程、函数等&lt;/li&gt;&#xA;&lt;li&gt;一般具有如下三个基本类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能&lt;/li&gt;&#xA;&lt;li&gt;逻辑&lt;/li&gt;&#xA;&lt;li&gt;状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;模块的表示&#xA;&lt;ul&gt;&#xA;&lt;li&gt;外部特性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模块的模块名、参数表以及模块影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内部特性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;完成其功能的程序代码和仅供该模块内部使用的数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通常先确定外部特性，再确定内部特性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;模块化方法的好处&#xA;&lt;ul&gt;&#xA;&lt;li&gt;降低了系统的复杂性，使得系统容易修改&lt;/li&gt;&#xA;&lt;li&gt;推动了系统各个部分的并行开发，从而提高了软件的生产效率&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;模块划分&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两个小问题之间应该保持相对的独立性&lt;/li&gt;&#xA;&lt;li&gt;C(P1+P2) &amp;gt; C(P1) + C(P2)的前提条件是P1和P2的集成很低，即要保证模块间的独立性&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-18%2016.08.48.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;信息隐藏&#34;&gt;信息隐藏&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模块中所包含的信息（包括数据和过程）不允许其它不需要这些信息的模块使用&lt;/li&gt;&#xA;&lt;li&gt;信息隐藏使得在将来修改软件时偶然引入错误所造成的影响可以局限在一个或几个模块内部，不致波及到软件的其它部分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;模块的独立性&#34;&gt;模块的独立性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件系统中每个模块之设计软件要求的具体的子功能，而和软件系统中其他的模块的接口是简单的&lt;/li&gt;&#xA;&lt;li&gt;一般采用两个准则度量模块独立性，即单个模块的内聚和模块间的耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内聚是单个模块功能强度(一个模块内部各个元素彼此结合的紧密程度)的度量&lt;/li&gt;&#xA;&lt;li&gt;耦合是模块之间的互相连接的紧密程度的度量&lt;/li&gt;&#xA;&lt;li&gt;模块独立性比较强的模块应是高内聚低耦合的模块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内聚性&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-18%2016.17.11.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内聚性与模块独立性正相关&lt;/li&gt;&#xA;&lt;li&gt;巧合内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内聚程度最低，几个模块内凑巧有一些程序代码相同，又没有明确表现出独立的功能，程序员为了减少存储把这些代码独立出来建立一个新的模块，这个模块就是巧合内聚模块&lt;/li&gt;&#xA;&lt;li&gt;缺点是模块的内容不易理解，不易修改和维护&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;逻辑内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;把几种相关的功能组合在一起&lt;/li&gt;&#xA;&lt;li&gt;每次被调用时，由传送给模块的&lt;strong&gt;控制型参数&lt;/strong&gt;来确定该模块应执行哪一种功能&lt;/li&gt;&#xA;&lt;li&gt;逻辑内聚模块表明了各部分之间在功能上的相关关系&lt;/li&gt;&#xA;&lt;li&gt;缺点：会额外加载不必要的代码，破坏了信息隐藏原则&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;时间内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;又称为经典内聚&lt;/li&gt;&#xA;&lt;li&gt;时间内聚模块中所有部分都要在同一时间内执行，所以它的得不逻辑更简单，存在的开关(或判定)转移更少&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;过程内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个模块由几个字模块组成，且通过一定的次序执行&lt;/li&gt;&#xA;&lt;li&gt;使用流程图作为工具设计程序的时候，常常通过流程图来确定模块划分，把流程图中的某一部分划出组成模块，就得到过程内聚模块&lt;/li&gt;&#xA;&lt;li&gt;缺点：仅包括完整功能的一部分，所以它的内聚程度仍然比较低，模块间的耦合程度还比较高；也可能包含多个功能的几部分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通信内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果一个模块内个功能部分都使用了相同的输入数据，或产生了相同的输出留香，则称之为通信内聚模块&lt;/li&gt;&#xA;&lt;li&gt;通常，通信内聚模块是通过&lt;strong&gt;数据流图&lt;/strong&gt;来定义的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;序列内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由多个字模块&lt;strong&gt;顺序&lt;/strong&gt;构成，类似过程内聚&lt;/li&gt;&#xA;&lt;li&gt;于过程内聚的区别在于过程内聚字模块之间须传递数据，而序列内聚字模块之间须&lt;strong&gt;传递数据&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;一个模块中各个处理元素和&lt;strong&gt;同一个功能&lt;/strong&gt;密切相关&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;功能内聚&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个模块中各个部分都是完成某一具体功能必不可少的组成部分，或者说一个模块中各个部分都是为完成一项具体功能而协同工作，紧密联系，不可分割的，则称该模块为功能内聚模块&lt;/li&gt;&#xA;&lt;li&gt;是内聚性最强的模块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;耦合性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;耦合性与模块独立性负相关&lt;/li&gt;&#xA;&lt;li&gt;内容耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最强的耦合性&lt;/li&gt;&#xA;&lt;li&gt;如果发生下列情形，两个模块之间就发生了内容耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个模块直接访问另一个模块的内部数据&lt;/li&gt;&#xA;&lt;li&gt;一个模块不通过正常入口转到另一模块内部&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正常入口：系统函数调用&lt;/li&gt;&#xA;&lt;li&gt;不通过正常入口：通过物理地址直接进入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;两个模块有一部分程序代码重叠&#xA;&lt;ul&gt;&#xA;&lt;li&gt;易发生在汇编和机器语言级别&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;一个模块由多个入口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;坏处：破坏了信息隐藏原则&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-18%2016.53.44.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;公共耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若一组模块都访问同一个公共数据环境，则它们之间的耦合就称为公共耦合&lt;/li&gt;&#xA;&lt;li&gt;公共的数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等&lt;/li&gt;&#xA;&lt;li&gt;要求全局变量是一个&lt;strong&gt;复杂的数据结构&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;坏处：任何一个函数对公共数据的修改，都会影响其他函数；必须记住公共模块的物理位置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;外部耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一组模块都访问同一&lt;strong&gt;全局简单变量&lt;/strong&gt;而不是同一全局数据结构，而不是通过参数表传递该全局变量的信息，称之为外部耦合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;控制耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果一个模块通过传送功能开关、标志、名字等控制信息，明显地控制选择另一模块的功能，就是控制耦合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;标记耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一组模块通过参数表传递&lt;strong&gt;记录信息&lt;/strong&gt;，就是标记耦合(&lt;strong&gt;数据信息&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;这个记录是某一数据结构的子结构，而不是简单变量(&lt;strong&gt;复杂数据结构&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;是一种耦合性比较松散的耦合&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-18%2017.05.54.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传递简单参数来交换输入、输出信息&lt;/li&gt;&#xA;&lt;li&gt;与标记耦合的区别是，传递的是&lt;strong&gt;简单类型&lt;/strong&gt;，而不是复杂数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;非直接耦合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两个模块之间没有直接关系，它们之间的联系完全是通过主模块或上层模块的控制和调用来实现的&lt;/li&gt;&#xA;&lt;li&gt;独立性最强&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;降低模块间耦合度的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尽量避免传递控制信息&lt;/li&gt;&#xA;&lt;li&gt;尽量传递简单类型而不是复杂的数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;降低模块接口的复杂性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传送信息的数量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;把出现大量参数的被调用模块分解成更小的模块，使得每个小模块只完成一个任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;联系方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尽可能使用call方式代替“直接引用“&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;传送信息的结构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以标准的、直接的方式提供&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;将模块的通信信息放在缓冲区&#xA;&lt;ul&gt;&#xA;&lt;li&gt;减少模块间互相等待的时间&lt;/li&gt;&#xA;&lt;li&gt;一个模块执行的速度、频率等问题一般不影响其他模块的设计&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;56-软件设计基础&#34;&gt;5.6 软件设计基础&lt;/h2&gt;&#xA;&lt;h3 id=&#34;自顶向下逐步细化&#34;&gt;自顶向下，逐步细化&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将软件的体系结构按自顶向下方式，对各个层次的过程细节和数据细节逐层细化，直到用程序设计语言的语句能够实现为止，从而最后确立整个的体系结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;系统控制结构&#34;&gt;系统控制结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统控制结构表明了程序构件（模块）的组织情况。控制层次往往用程序的层次（树形或网状）结构来表示&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-18%2017.21.20.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;结构划分和结构图&#34;&gt;结构划分和结构图&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;程序结构可以按水平方向或垂直方向进行划分&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
