<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件工程 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
    <description>Recent content in 软件工程 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 24 Apr 2025 10:59:10 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件工程</title>
      <link>https://y-m-m.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;第一章-软件工程概述&#34;&gt;第一章 软件工程概述&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机系统是指由硬件和软件组成，能够自动接收输入、处理数据并输出结果的系统。它以存储程序和数据为基础，通过中央处理单元(CPU)执行指令，完成各种计算和控制任务。计算机系统既包括物理设备，也包括其上的操作系统、应用程序等软件部分&lt;/li&gt;&#xA;&lt;li&gt;计算机系统的六个组成元素如下&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包括计算机系统的所有物理组件，如CPU、内存、主板、输入输出设备等，是计算机运行的基础平台&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指运行在硬件上的各种程序，包括操作系统、应用软件和开发工具等，负责管理资源并执行任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是计算机处理的原始信息，包括数字、文字、图像、音频等&lt;/li&gt;&#xA;&lt;li&gt;数据是计算过程的对象，其结构和编码方式对系统性能和功能有重要影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用户&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是使用计算机系统的人。用户通过输入设备与系统交互，发出命令并获取结果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网络&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是实现多台计算机之间通信的系统，包括局域网、广域网和互联网等，使得资源可以共享，信息可以远程传输&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是系统各部分之间的连接方式，包括硬件接口(如USB, PCIe)、软件接口(如API)和人机接口(如图形界面)，保证系统内部和外部的协调运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;11-计算机软件&#34;&gt;1.1 计算机软件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件的定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合&lt;/li&gt;&#xA;&lt;li&gt;程序是按事先设计的功能和性能要求执行的指令序列；&lt;/li&gt;&#xA;&lt;li&gt;数据是使程序能正常操纵信息的数据结构；&lt;/li&gt;&#xA;&lt;li&gt;文档是与程序开发，维护和使用有关的图文材料&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件是一种逻辑实体，具有抽象性&lt;/li&gt;&#xA;&lt;li&gt;软件的开发是一种逻辑思维成熟的过程，无明显制造过程&lt;/li&gt;&#xA;&lt;li&gt;在软件的运行和使用期间，没有硬件那样的机械磨损，老化问题，但却存在退化问题&lt;/li&gt;&#xA;&lt;li&gt;软件的开发依然很原始，至今尚未完全摆脱手工艺的开发方式&lt;/li&gt;&#xA;&lt;li&gt;软件是高度复杂的逻辑体&lt;/li&gt;&#xA;&lt;li&gt;软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性&lt;/li&gt;&#xA;&lt;li&gt;软件成本相当昂贵&lt;/li&gt;&#xA;&lt;li&gt;相当多的软件工作涉及到社会因素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;12-软件的发展和软件危机&#34;&gt;1.2 软件的发展和软件危机&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件发展阶段&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序设计阶段： 20世纪50至60年代&lt;/li&gt;&#xA;&lt;li&gt;程序系统阶段： 20世纪60至70年代&lt;/li&gt;&#xA;&lt;li&gt;传统软件工程阶段：20世纪70～90年代&lt;/li&gt;&#xA;&lt;li&gt;现代软件工程阶段：20世纪90年代至今&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2020.10.06.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;最根本的变化&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人们对软件有了新的认识&lt;/li&gt;&#xA;&lt;li&gt;软件需求是软件发展的动力&lt;/li&gt;&#xA;&lt;li&gt;软件工作的范围从只考虑程序的编写扩展到涉及整个软件生存期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发的高成本与软件产品的低质量之间的尖锐矛盾(软件技术发展第二阶段)&lt;/li&gt;&#xA;&lt;li&gt;软件危机（Software Crisis）：指由于落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机的表现&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发计划难以制订&lt;/li&gt;&#xA;&lt;li&gt;软件开发费用和进度失控&lt;/li&gt;&#xA;&lt;li&gt;软件产品无法让用户满意&lt;/li&gt;&#xA;&lt;li&gt;软件产品的质量难以保证&lt;/li&gt;&#xA;&lt;li&gt;软件通常没有适当的文档资料&lt;/li&gt;&#xA;&lt;li&gt;软件通常是不可维护的&lt;/li&gt;&#xA;&lt;li&gt;软件成本在计算机系统总成本中所占比例逐年上升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机产生的内在原因&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生产本身存在着复杂性&lt;/li&gt;&#xA;&lt;li&gt;软件开发和维护所使用的方法不合理&lt;/li&gt;&#xA;&lt;li&gt;解决途径：软件工程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;13-软件工程&#34;&gt;1.3 软件工程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要思想：按照工程化的原理、原则和方法开发、运行、维护软件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程是工程概念在软件领域里的一个特定应用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工程：将科学及数学原理运用于实际用途的应用手段，如：设计、制造、机器操纵、构架、系统等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程涉及软件产品的所有环节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程三要素&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为软件开发提供了“如何做”的技术。它包括了多方面的任务，如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为软件工程方法提供了自动的或半自动的软件支撑环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程的过程则是将软件工程的方法和工具综合起来以达到合理、及时地进行计算机软件开发的目的。过程定义了方法使用的顺序、要求交付的文档资料、为保证质量和协调变化所需要的管理、及软件开发各个阶段完成的里程碑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程的目标&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在给定成本、进度的前提下，开发出满足用户需求且具有 可修改性、有效性、可靠性、可理解性、可维护性、可重用性、可适应性、可移植性、可追踪性和可互操作性 的软件产品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程研究内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发方法学、开发过程模型、开发工具和软件工程环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件管理学、软件工程经济学、软件心理学等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程四条基本原则&#xA;&lt;ul&gt;&#xA;&lt;li&gt;选取适宜的开发模型&lt;/li&gt;&#xA;&lt;li&gt;采用合适的设计方法&lt;/li&gt;&#xA;&lt;li&gt;提供高质量的工程支持&lt;/li&gt;&#xA;&lt;li&gt;重视开发过程的管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程的一般原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;抽象&lt;/li&gt;&#xA;&lt;li&gt;信息隐藏&lt;/li&gt;&#xA;&lt;li&gt;模块化&lt;/li&gt;&#xA;&lt;li&gt;局部化&lt;/li&gt;&#xA;&lt;li&gt;确定性&lt;/li&gt;&#xA;&lt;li&gt;一致性&lt;/li&gt;&#xA;&lt;li&gt;完备性&lt;/li&gt;&#xA;&lt;li&gt;可验证性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程基本原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用分阶段的生命周期计划严格管理&lt;/li&gt;&#xA;&lt;li&gt;坚持进行阶段评审&lt;/li&gt;&#xA;&lt;li&gt;实行严格的产品控制(控制需求变动的影响)&lt;/li&gt;&#xA;&lt;li&gt;采用现代程序设计技术&lt;/li&gt;&#xA;&lt;li&gt;结果应能清楚地审查&lt;/li&gt;&#xA;&lt;li&gt;开发小组人员应少而精&lt;/li&gt;&#xA;&lt;li&gt;承认不断改进软件工程实践的意义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;14-软件工程知识体系&#34;&gt;1.4 软件工程知识体系&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程知识体系指南&lt;/li&gt;&#xA;&lt;li&gt;建立软件工程知识体系的一个目的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;促进世界范围内对软件工程的一致观点&lt;/li&gt;&#xA;&lt;li&gt;阐明软件工程相对其他学科(如计算机科学、项目管理、计算机工程和数学等)的关系，并确立它们的界线&lt;/li&gt;&#xA;&lt;li&gt;确定软件工程学科的内容&lt;/li&gt;&#xA;&lt;li&gt;确定软件工程本体知识的各个专题&lt;/li&gt;&#xA;&lt;li&gt;为相应的课程和职业资格认证材料的编写奠定基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程知识体系知识域&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件需求&lt;/li&gt;&#xA;&lt;li&gt;软件设计&lt;/li&gt;&#xA;&lt;li&gt;软件构造&lt;/li&gt;&#xA;&lt;li&gt;软件测试&lt;/li&gt;&#xA;&lt;li&gt;软件维护&lt;/li&gt;&#xA;&lt;li&gt;软件配置管理&lt;/li&gt;&#xA;&lt;li&gt;软件工程管理&lt;/li&gt;&#xA;&lt;li&gt;软件工程过程&lt;/li&gt;&#xA;&lt;li&gt;软件工程工具和方法&lt;/li&gt;&#xA;&lt;li&gt;软件质量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第二章-软件生命周期模型&#34;&gt;第二章 软件生命周期模型&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21-软件工程过程&#34;&gt;2.1 软件工程过程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工程项目的PDCA循环（戴明环）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;即Plan（规划）、Do（执行）、Check（检查）、Action（处理）等抽象活动的循环&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2020.48.01.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P(Plan) 软件规格说明&lt;/li&gt;&#xA;&lt;li&gt;D(Do) 软件开发&lt;/li&gt;&#xA;&lt;li&gt;C(Check) 软件确认&lt;/li&gt;&#xA;&lt;li&gt;A(Action) 软件演进&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;22-软件生命周期&#34;&gt;2.2 软件生命周期&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生命周期(software life cycle )是指软件产品从考虑其概念开始，到该软件产品不再使用为止的整个时期，一般包括概念阶段、分析与设计阶段、构造阶段、移交阶段等不同时期。&lt;/li&gt;&#xA;&lt;li&gt;六个基本活动&#xA;&lt;ul&gt;&#xA;&lt;li&gt;制定计划 P&lt;/li&gt;&#xA;&lt;li&gt;需求分析和定义 D&lt;/li&gt;&#xA;&lt;li&gt;软件设计 D&lt;/li&gt;&#xA;&lt;li&gt;程序编写 D&lt;/li&gt;&#xA;&lt;li&gt;软件测试 C&lt;/li&gt;&#xA;&lt;li&gt;运行/维护 A&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;23-软件传统生命周期模型&#34;&gt;2.3 软件传统生命周期模型&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;瀑布模型&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.24.21.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义阶段、开发阶段和维护阶段&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型中的每一个开发活动具有下列特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本活动的工作对象来自于上一项活动的输出&lt;/li&gt;&#xA;&lt;li&gt;根据本阶段的活动规程执行相应的任务&lt;/li&gt;&#xA;&lt;li&gt;产生本阶段活动相关产出—软件工件，作为下一活动的输入&lt;/li&gt;&#xA;&lt;li&gt;对本阶段活动执行情况进行评审&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型中的运行/维护活动，是一个具有最长生命周期的循环往复阶段&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.26.28.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生命周期的阶段划分不仅降低了软件开发的复杂程度，而且提高了软件开发过程的透明性，便于将软件工程过程和软件管理过程有机地融合在一起，从而提高软件开发过程的可管理性&lt;/li&gt;&#xA;&lt;li&gt;推迟了软件实现，强调在软件实现前必须进行分析和设计工作&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型以项目的阶段评审和文档控制为手段有效地对整个开发过程进行指导，保证了阶段之间的正确衔接，能够及时发现并纠正开发过程中存在的缺陷，从而能够使产品达到预期的质量要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;瀑布模型的缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模型缺乏灵活性，特别是无法解决软件需求不明确或不准确的问题，这是瀑布模型最突出的缺点。因此，瀑布模型只适合于&lt;strong&gt;需求明确&lt;/strong&gt;的软件项目&lt;/li&gt;&#xA;&lt;li&gt;模型的风险控制能力较弱。成品时间长；体系结构的风险和错误只有在测试阶段才能发现，返工导致项目延期&lt;/li&gt;&#xA;&lt;li&gt;软件活动是文档驱动的，文档过多会增加工作量，文档完成情况会误导管理人员&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;V模型和W模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;V模型——瀑布模型的变种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;V模型的价值在于纠正了人们不重视测试阶段重要性的错误认识，将测试分等级，并和前面的开发阶段对应起来&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.32.09.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;W模型——瀑布模型的变种&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将测试广义化，增加了确认和验证内容，并贯穿整个软件生命周期&lt;/li&gt;&#xA;&lt;li&gt;W模型由两个V型模型组成，分别代表测试与开发过程 ，两个过程是同步进行的&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.33.10.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是指模拟某种产品的原始模型。软件原型是一个早期可以运行的版本，它反映最终系统的部分重要特性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法构造软件系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获得一组基本的需求说明，快速分析构造出一个小型的软件系统，满足用户的基本要求&lt;/li&gt;&#xA;&lt;li&gt;用户试用原型系统，对其进行反应和评价&lt;/li&gt;&#xA;&lt;li&gt;开发者根据用户意见对原型进行改进，获得新的原型版本&lt;/li&gt;&#xA;&lt;li&gt;周而复始，直到产品满足用户的要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型化方法是在研究需求分析技术的过程中产生的，但也可以用于软件开发的其他阶段&lt;/li&gt;&#xA;&lt;li&gt;原型的种类(根据目的划分)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;探索型：弄清对目标系统的要求&lt;/li&gt;&#xA;&lt;li&gt;实验型：系统实现前考察系统的可行性&lt;/li&gt;&#xA;&lt;li&gt;进化型：将原型扩展到开发过程，通过原型开发逐步实现所有系统功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型的使用策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;废弃策略：探索型和实验型&lt;/li&gt;&#xA;&lt;li&gt;追加策略：进化型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型不同于最终的系统，需要快速实现和运行，因此，原型可以忽略一切暂时不必关心的部分（抽象）&lt;/li&gt;&#xA;&lt;li&gt;原型方法的优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有助于增进软件人员和用户对系统服务需求的理解&lt;/li&gt;&#xA;&lt;li&gt;提供了一种有力的学习手段&lt;/li&gt;&#xA;&lt;li&gt;容易确定系统的性能、服务的可应用性、设计的可行性和产品的结果&lt;/li&gt;&#xA;&lt;li&gt;原型的最终版本可作为最终产品或最终系统的一部分&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法的缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;文档容易被忽略&lt;/li&gt;&#xA;&lt;li&gt;建立原型的许多工作会被浪费掉&lt;/li&gt;&#xA;&lt;li&gt;项目难以规划和管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;原型方法应用过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.38.32.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;原型方法支持的软件生命周期&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原型方法可以支持软件生命周期的不同阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;辅助或代替分析阶段 (确定需求)&lt;/li&gt;&#xA;&lt;li&gt;辅助设计阶段 (确定设计方案的合理性)&lt;/li&gt;&#xA;&lt;li&gt;代替分析与设计阶段&lt;/li&gt;&#xA;&lt;li&gt;代替分析、设计和实现阶段&lt;/li&gt;&#xA;&lt;li&gt;代替全部开发阶段 (典型的演化模型 )&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.41.00.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;演化模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发“两次”后的软件能较好地满足用户的要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一次：试验开发，目的是探索可行性，弄清楚项目的需求。第一次得到的试验性产品称为“原型”&lt;/li&gt;&#xA;&lt;li&gt;第二次：在第一次的原型基础上进行开发，从而获得较为满意的软件产品&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.42.33.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;演化模型主要针对需求不是很明确的软件项目&lt;/li&gt;&#xA;&lt;li&gt;演化模型缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可能会抛弃瀑布模型的文档控制优点，开发过程不透明&lt;/li&gt;&#xA;&lt;li&gt;探索式演化模型可能会导致最后的软件系统的系统结构较差&lt;/li&gt;&#xA;&lt;li&gt;可能会用到一些不符合主流、不符合要求或者不成熟的工具和技术&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增量模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;结合了瀑布模型和演化模型的优点&lt;/li&gt;&#xA;&lt;li&gt;过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户定义需求框架，确定系统需求实现的优先级&lt;/li&gt;&#xA;&lt;li&gt;此后针对核心需求以及系统的性能要求确定系统的体系结构，并以此体系结构指导增量的集成，保证在整个开发过程中体系结构的稳定性&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.44.53.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增量模型优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增强了客户使用系统的信心，逐步提出对后续增量的需求&lt;/li&gt;&#xA;&lt;li&gt;项目总体失败的风险较低&lt;/li&gt;&#xA;&lt;li&gt;增量从高到低的优先级确定保障了系统重要功能部分的可靠性&lt;/li&gt;&#xA;&lt;li&gt;同一个体系结构提高了系统的稳定性和可维护性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;增量模型缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;增量的粒度选择问题&lt;/li&gt;&#xA;&lt;li&gt;确定所有的基本业务服务比较困难&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;螺旋模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;针对大型软件项目&lt;/li&gt;&#xA;&lt;li&gt;将瀑布模型和演化模型结合起来，并加入了风险分析&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.49.11.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;螺旋模型沿着螺线旋转，在四个象限上分别表达了四个方面的活动，即：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;制定计划──确定软件目标，选定实施方案，弄清项目开发的限制条件&lt;/li&gt;&#xA;&lt;li&gt;风险分析──分析所选方案，考虑如何识别和消除风险&lt;/li&gt;&#xA;&lt;li&gt;实施工程──实施软件开发&lt;/li&gt;&#xA;&lt;li&gt;客户评估──评价开发工作，提出修正建议&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;螺旋模型适合于大型软件的开发;然而风险分析需要相当丰富的评估经验，风险的规避又需要深厚的专业知识，这给螺旋模型的应用增加了难度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;喷泉模型(迭代模型)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发过程具有两个固有的本质特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;迭代&lt;/li&gt;&#xA;&lt;li&gt;无间隙&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;适用于面向对象的软件开发过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.52.28.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;构件组装模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本质上是演化的，开发过程是迭代的&lt;/li&gt;&#xA;&lt;li&gt;五个阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需求定义和分析&lt;/li&gt;&#xA;&lt;li&gt;软件体系结构设计&lt;/li&gt;&#xA;&lt;li&gt;构件开发&lt;/li&gt;&#xA;&lt;li&gt;应用软件构造&lt;/li&gt;&#xA;&lt;li&gt;测试和发布&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.53.33.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件开发的步骤过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义和分析需求&lt;/li&gt;&#xA;&lt;li&gt;标识本项目需要什么构件&lt;/li&gt;&#xA;&lt;li&gt;从库中查找构件或相似的构件&lt;/li&gt;&#xA;&lt;li&gt;如果可用转下一条，否则自行开发或修改，确认后入库；&lt;/li&gt;&#xA;&lt;li&gt;构造为新系统作第m次迭代；&lt;/li&gt;&#xA;&lt;li&gt;测试、确认&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;快速应用开发(RAD)模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;快速应用开发(Rapid Application Development，RAD)是一个增量型的软件开发过程模型，采用构件组装方法进行快速开发&lt;/li&gt;&#xA;&lt;li&gt;包含如下阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务建模：通过捕获业务过程中信息流的流动及处理情况描述业务处理系统应该完成的功能&lt;/li&gt;&#xA;&lt;li&gt;数据建模：对于支持业务过程的数据流，建立数据对象集合,定义数据对象属性,与其它数据对象的关系构成数据模型，可辅之以E-R图&lt;/li&gt;&#xA;&lt;li&gt;过程建模：定义如何使数据对象在信息流中完成各业务功能&lt;/li&gt;&#xA;&lt;li&gt;应用生成：利用第四代语言(4GL)写出处理程序，重用已有构件或创建新的可重用构件，利用环境提供的工具，自动生成，构造出整个的应用系统&lt;/li&gt;&#xA;&lt;li&gt;测试及迭代：由于大量重用，一般只作总体测试，但新创建的构件还是要测试的。当一轮需求完成快速开发后，可以迭代进入下一轮需求的开发&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2021.56.58.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;24-新型软件生命周期模型&#34;&gt;2.4 新型软件生命周期模型&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;统一软件开发过程RUP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RUP既是一种软件生命周期模型，又是一种支持面向对象软件开发的工具，它将软件开发过程要素和软件工件要素整合在统一的框架中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;基本结构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二维的软件开发模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;横轴在时间上将生命周期过程展开成四个阶段（Phase），每个阶段特有的里程碑（Milestone）是该阶段结束的标志，每个阶段里又划分为不同的迭代（Iteration），体现了软件开发过程的动态结构&lt;/li&gt;&#xA;&lt;li&gt;纵轴按照活动的内容进行组织，包括活动（activity）、活动产出的工件（artifact）、活动的执行角色（worker）以及活动执行的工作流（workflow），体现软件开发过程的静态结构&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-20%2009.53.15.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;四个阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阶段目标：通过业务用例（Business Case）了解业务并确定项目的边界，包括项目的验收规范、风险评估、所需资源估计、阶段计划等&lt;/li&gt;&#xA;&lt;li&gt;Milestone：软件目标里程碑。包括一些重要的文档，如项目愿景（vision）、原始用例模型、原始业务风险评估、一个或者多个原型、原始业务场景等&lt;/li&gt;&#xA;&lt;li&gt;需要对这些文档进行评审，以确定正确理解用例需求、项目风险评估合理、阶段计划可行等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;细化阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阶段目标：分析问题领域，建立适合需求的软件体系结构基础，编制项目计划，完成项目中技术要求高、风险大的关键需求的开发&lt;/li&gt;&#xA;&lt;li&gt;Milestone：体系结构里程碑。包括风险分析文档、软件体系结构基线、项目计划、可执行的进化原型、初始版本的用户手册等&lt;/li&gt;&#xA;&lt;li&gt;通过评审确定软件体系结构的稳定性、确认高风险的业务需求和技术机制已经解决、修订的项目计划可行等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;构造阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阶段目标：将所有剩余的技术构件和稳定业务需求功能开发出来，并集成为产品，所有功能被详细测试&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构造阶段只是一个制造过程，其重点放在管理资源及控制开发过程以优化成本、进度和质量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Milestone：运行能力里程碑。包括可以运行的软件产品、用户手册等，它决定了产品是否可以在测试环境中进行部署&lt;/li&gt;&#xA;&lt;li&gt;要确定软件、环境、用户是否可以开始系统的运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;移交阶段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阶段目标：软件产品正常运行并交付用户使用。交付阶段可以跨越几次迭代，包括为发布做准备的产品测试，基于用户反馈的少量调整&lt;/li&gt;&#xA;&lt;li&gt;Milestone：产品发布里程碑。包括维护和售后支持文档手册等&lt;/li&gt;&#xA;&lt;li&gt;要确定最终目标是否实现，是否应该开始产品下一个版本的另一个开发周期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RUP的迭代增量开发思想&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RUP是以用例为驱动，软件体系结构为核心，应用迭代及增量的新型软件生命周期模型&lt;/li&gt;&#xA;&lt;li&gt;RUP的每一个阶段可以进一步划分为一个或多个迭代过程，从一个迭代过程到另一个迭代过程增量形成最终的系统&lt;/li&gt;&#xA;&lt;li&gt;RUP是融合了喷泉模型和增量模型的一种综合生命周期模型&lt;/li&gt;&#xA;&lt;li&gt;RUP将整个项目的开发目标划分成一些更易于完成和达到的阶段性小目标。每一次迭代就是为了完成一定阶段性小目标而从事的一系列开发活动，包含需求、设计、实施（编码）、部署、测试等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RUP的核心工作流&#xA;&lt;ul&gt;&#xA;&lt;li&gt;6个核心过程工作流(Core Process Workflows)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;商业建模（Business Modeling）&lt;/li&gt;&#xA;&lt;li&gt;需求（Requirements）&lt;/li&gt;&#xA;&lt;li&gt;分析和设计（Analysis &amp;amp; Design）&lt;/li&gt;&#xA;&lt;li&gt;实现（Implementation）&lt;/li&gt;&#xA;&lt;li&gt;测试（Test）&lt;/li&gt;&#xA;&lt;li&gt;部署（Deployment）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;3个核心支持工作流(Core Supporting Workflows)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配置和变更管理（Configuration &amp;amp; Change Management）&lt;/li&gt;&#xA;&lt;li&gt;项目管理（Project Management）&lt;/li&gt;&#xA;&lt;li&gt;环境（Environment）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;RUP的最佳实践&#xA;&lt;ul&gt;&#xA;&lt;li&gt;短时间分区式的迭代&lt;/li&gt;&#xA;&lt;li&gt;适应性开发&lt;/li&gt;&#xA;&lt;li&gt;在早期迭代中解决高技术风险和高业务价值的问题&lt;/li&gt;&#xA;&lt;li&gt;不断地让用户参与迭代结果的评估&lt;/li&gt;&#xA;&lt;li&gt;在早期迭代中建立内聚的核心架构&lt;/li&gt;&#xA;&lt;li&gt;不断地验证质量；尽早、经常和实际地测试&lt;/li&gt;&#xA;&lt;li&gt;使用用例驱动软件建模&lt;/li&gt;&#xA;&lt;li&gt;可视化软件建模：使用UML进行软件建模&lt;/li&gt;&#xA;&lt;li&gt;仔细地管理需求&lt;/li&gt;&#xA;&lt;li&gt;实行变更请求和配置管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;敏捷开发&#xA;&lt;ul&gt;&#xA;&lt;li&gt;敏捷宣言&#xA;&lt;ul&gt;&#xA;&lt;li&gt;个体和交互 胜过 过程和工具&lt;/li&gt;&#xA;&lt;li&gt;可以工作的软件 胜过 面面俱到的文档&lt;/li&gt;&#xA;&lt;li&gt;客户合作 胜过 合同谈判&lt;/li&gt;&#xA;&lt;li&gt;响应变化 胜过 遵循计划&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;敏捷方法的主要特点就是具有快速及灵活的响应变更的能力&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以人为核心、迭代、循序渐进的开发方法&lt;/li&gt;&#xA;&lt;li&gt;软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态&lt;/li&gt;&#xA;&lt;li&gt;敏捷方法很多,包括极限编程(XP)、 Scrum、功能驱动开发(FDD)、水晶、净室开发等多种方法，这些方法本质实际上是一样的，都遵循“敏捷宣言”原则&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;极限编程 (eXtreme Programming )&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XP是一种轻量级的软件开发方法，是一种以实践为基础的软件工程过程和思想&lt;/li&gt;&#xA;&lt;li&gt;它使用快速的反馈，大量而迅速的交流，经过保证的测试来最大限度的满足用户的需求&lt;/li&gt;&#xA;&lt;li&gt;XP强调用户满意，开发人员可以对需求的变化作出快速的反应&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-20%2010.16.44.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;XP的工作环境&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个参加项目开发的人都将担任一个角色（项目经理、项目监督人等等）并履行相应的权利和义务。用户也是项目组的一部分&lt;/li&gt;&#xA;&lt;li&gt;为了在软件开发过程中最大程度地实现和满足客户和开发人员的基本权利和义务，XP要求把工作环境也做得最好&lt;/li&gt;&#xA;&lt;li&gt;所有人都在同一个开放的开发环境中工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;XP的需求分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发人员和客户一起，把各种需求变成一个个小的需求模块（User Story）&lt;/li&gt;&#xA;&lt;li&gt;这些模块又会根据实际情况被组合在一起或者被分解成更小的模块，且它们都被记录在一些小卡片（Story Card）上&lt;/li&gt;&#xA;&lt;li&gt;客户根据每个模块的商业价值来指定它们的优先级&lt;/li&gt;&#xA;&lt;li&gt;然后，开发人员确定每个需求模块的开发风险&lt;/li&gt;&#xA;&lt;li&gt;经过开发人员和客户的评估后，它们被安排在不同的开发周期里，客户将得到一个尽可能准确的开发计划&lt;/li&gt;&#xA;&lt;li&gt;客户为每个需求模块指定验收测试（功能测试）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;XP的设计&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从开发的角度来看，XP内层的过程是一个基于Test Driven Development周期，每个开发周期都有很多相应的单元测试&lt;/li&gt;&#xA;&lt;li&gt;随着这些测试的进行，通过的单元测试也越来越多。通过这种方式，客户和开发人员都很容易检验，是否履行了对客户的承诺&lt;/li&gt;&#xA;&lt;li&gt;同时，XP还大力提倡设计复核（Review）、代码复核以及重整和优化（Refectory），所有的这些过程其实也是优化设计的过程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;XP的编程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XP提倡配对编程（Pair Programming），而且代码所有权是归于整个开发队伍（Collective Code Ownership）&lt;/li&gt;&#xA;&lt;li&gt;程序员在写程序和重整优化程序的时候，都要严格遵守编程规范&lt;/li&gt;&#xA;&lt;li&gt;任何人都可以修改其他人写的程序，修改后要确定新程序能通过单元测试&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;XP的测试&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XP提倡在开始写程序之前先写单元测试&lt;/li&gt;&#xA;&lt;li&gt;开发人员应该经常把开发好的模块整合到一起（Continuous Integration，持续集成），每次整合后都要运行单元测试&lt;/li&gt;&#xA;&lt;li&gt;做任何的代码复核和修改，都要运行单元测试&lt;/li&gt;&#xA;&lt;li&gt;发现了BUG，就要增加相应的测试&lt;/li&gt;&#xA;&lt;li&gt;除了单元测试之外，还有整合测试，功能测试、负荷测试和系统测试等&lt;/li&gt;&#xA;&lt;li&gt;所有这些测试，是XP开发过程中最重要的文档之一，也是最终交付给用户的内容之一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第三章-软件需求分析&#34;&gt;第三章 软件需求分析&lt;/h1&gt;&#xA;&lt;h2 id=&#34;31-系统分析&#34;&gt;3.1 系统分析&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统分析是一组统称为计算机系统工程的活动。它着眼于所有的系统元素，而不仅仅是软件&lt;/li&gt;&#xA;&lt;li&gt;系统分析主要探索软件项目的目标、市场预期、主要的技术指标等，用于帮助决策者做出是否进行软件项目立项的决定&lt;/li&gt;&#xA;&lt;li&gt;系统分析时需要硬件工程师、软件工程师以及数据库专家共同合作来实现&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-20%2010.28.58.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;可行性分析&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确定问题是否值得去解决&lt;/li&gt;&#xA;&lt;li&gt;在系统分析过程中，引入系统可行性分析的一个优点在于可以在很大程度上减少投资的损失&lt;/li&gt;&#xA;&lt;li&gt;一方面为后期的软件开发指明方向，也是项目管理和计划的前期准备；另一方面即使决定项目终止也不会对项目建设的双方带来巨大的经济损失&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;可行性分析的步骤&#xA;&lt;ul&gt;&#xA;&lt;li&gt;经济可行性&lt;/li&gt;&#xA;&lt;li&gt;技术可行性&lt;/li&gt;&#xA;&lt;li&gt;法律可行性&lt;/li&gt;&#xA;&lt;li&gt;方案的选择&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;32-需求定义&#34;&gt;3.2 需求定义&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需求的定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需求来源于用户的一些“需要”，这些“需要”被分析、确认后形成完整的文档，该文档详细地说明了产品“必须或应当”做什么&lt;/li&gt;&#xA;&lt;li&gt;通俗的软件需求定义：针对待开发的软件产品，软件开发人员通过对软件产品的拥有者和使用者的交流和调研，获取相关的业务职能、业务知识和业务流程等信息，并对这些信息进行分析和整理后形成的有关该软件产品必须提供的功能和性能等指标的规格描述&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;需求的不确定性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需求的不确定性反映了需求的重要作用，需求分析的优劣对软件产品的质量影响最大。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;33-软件需求分析的目标及任务&#34;&gt;3.3 软件需求分析的目标及任务&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件需求任务&#xA;&lt;ul&gt;&#xA;&lt;li&gt;研究一种无二义性的表达工具，它能为用户和软件人员双方都接受，并能够把“需求”严格地、形式地表达出来&lt;/li&gt;&#xA;&lt;li&gt;任务： 准确地定义新系统的目标，回答系统必须“做什么”的问题，并编制需求规格说明书&lt;/li&gt;&#xA;&lt;li&gt;目标： 需求分析的目标：就是借助于当前系统的逻辑模型导出目标系统的逻辑模型，解决目标系统的 “做什么” 的问题&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-20%2011.10.50.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;需求分析的必要性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需求分析是一项必须的软件工程活动。它在系统需求分析和软件设计之间起到桥梁的作用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;34-软件需求分析建模原则和方法&#34;&gt;3.4 软件需求分析建模原则和方法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分析建模的操作性原则&#xA;&lt;ul&gt;&#xA;&lt;li&gt;问题的信息域必须被表示和理解。(数据模型)&lt;/li&gt;&#xA;&lt;li&gt;软件将完成的功能必须被定义。(功能模型)&lt;/li&gt;&#xA;&lt;li&gt;软件的行为(作为外部事件的结果)必须被表示。 (行为模型)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信息内容和关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信息内容表示了个体数据和控制对象，它们可和其他的数据和控制对象关联&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;信息流&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信息流表示了数据和控制在系统中流动时变化的方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;信息结构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信息结构表示了各种数据和控制项的内部组织&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;功能模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对进入软件的信息和数据进行变换和处理的模块，它必须至少完成三个常见功能：输入、处理和输出&lt;/li&gt;&#xA;&lt;li&gt;功能模型从顶层的语境层模型开始，经过一系列的细化迭代，越来越多的功能细节被发现，直至得到所有系统功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行为模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大多数软件对来自外界的事件做出反应，这种刺激／反应特征形成了行为模型的基础&lt;/li&gt;&#xA;&lt;li&gt;行为模型创建了软件状态的表示，以及导致软件状态变化的事件的表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;需求分析的工程化原则&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先要正确地理解问题，再建立分析模型&lt;/li&gt;&#xA;&lt;li&gt;记录每个需求的起源及原因，保证需求的可回溯性&lt;/li&gt;&#xA;&lt;li&gt;开发一个人机交互过程的原型&lt;/li&gt;&#xA;&lt;li&gt;给需求赋予优先级：紧张的开发时间要求尽量避免一次性实现每个软件需求，应采用迭代增量的开发模型&lt;/li&gt;&#xA;&lt;li&gt;努力删除歧义性：因为大多数需求以自然语言描述，存在歧义性的可能性，正式的技术评审是发现并删除歧义性的一种有效方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;35-软件需求分析工程&#34;&gt;3.5 软件需求分析工程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人们把所有与需求直接相关的活动通称为需求工程&lt;/li&gt;&#xA;&lt;li&gt;需求工程中的活动可分为两大类，一类属于需求开发，另一类属于需求管理&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-20%2011.23.50.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;36-软件需求分析过程&#34;&gt;3.6 软件需求分析过程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;需求获取—《用户需求说明书》&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
