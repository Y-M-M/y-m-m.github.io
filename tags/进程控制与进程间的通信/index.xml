<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程控制与进程间的通信 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
    <description>Recent content in 进程控制与进程间的通信 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 May 2025 10:55:39 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 进程控制与进程之间的通信</title>
      <link>https://y-m-m.github.io/post/linux_%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;h1 id=&#34;进程的基本概念&#34;&gt;进程的基本概念&lt;/h1&gt;&#xA;&lt;h2 id=&#34;进程的基本概念和逻辑内存&#34;&gt;进程的基本概念和逻辑内存&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程与程序&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指令和数据的集合&lt;/li&gt;&#xA;&lt;li&gt;存放在磁盘上的一个普通文件里&lt;/li&gt;&#xA;&lt;li&gt;文件的i节点中标为可执行，内容符合系统要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包括指令段、用户数据段和系统数据段的执行环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程与程序的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序用于初始化进程的指令段和用户数据段，初始化后，进程和初始化它的程序之间无联系&lt;/li&gt;&#xA;&lt;li&gt;进程运行时磁盘上的程序文件不可修改/删除&lt;/li&gt;&#xA;&lt;li&gt;同时运行的多个进程可由统一程序初始化得到，进程之间没什么联系。内核通过安排它们共享指令段甚至不同程序的进程共享函数库(动态链接)以节省内存，但这种安排对用户来说是透明的&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.08.25.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程的组成部分&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;四部分：指令段、数据段、栈段和系统数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指令段Text&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序的CPU指令代码,包括：主程序和子程序编译后的CPU指令代码，以及调用的库函数代码&lt;/li&gt;&#xA;&lt;li&gt;指令段的大小固定不变，只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用户数据段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局变量，静态(static)变量，字符串常数&lt;/li&gt;&#xA;&lt;li&gt;允许数据段增长和缩小，实现内存的动态分配&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统调用sbrk()允许编程调整数据段的大小（调整单位为“页”）&lt;/li&gt;&#xA;&lt;li&gt;内存管理库函数，如：malloc()，free()&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;sbrk vs. malloc&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.12.48.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用户栈段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序执行所需要的栈空间，实现函数的调用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于保存子程序返回地址&lt;/li&gt;&#xA;&lt;li&gt;在函数和被调函数之间传递参数&lt;/li&gt;&#xA;&lt;li&gt;函数体内部定义的变量(静态变量除外)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;main函数得到的命令行参数以及环境参数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放在栈的最底部&lt;/li&gt;&#xA;&lt;li&gt;main函数运行之前，这些部分就已经被系统初始化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;栈段的动态增长与增长限制（getrlimit, setrlimit）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统数据段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;上述三部分在进程私有的独立的逻辑地址空间内（CPU用户态访问）&lt;/li&gt;&#xA;&lt;li&gt;系统数据段是内核内的数据，每个进程对应一套&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包括页表和进程控制块PCB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程虚拟地址空间的布局&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.17.21.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;size命令观察可执行程序的段大小&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;size filename-list 列出程序或目标文件的相应段大小&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.22.42.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Pentinum虚拟地址到物理地址转换&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.23.37.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个4K是一个页&lt;/li&gt;&#xA;&lt;li&gt;VPN页号&lt;/li&gt;&#xA;&lt;li&gt;VPO业内偏移量&lt;/li&gt;&#xA;&lt;li&gt;术语&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.30.52.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;两级页表&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.31.37.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;虚实地址转换&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.35.07.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;PDE （Page Directory Entry）&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.35.59.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;PTE （Page Table Entry）&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.36.26.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;PDE与PTE中的标志位能解决的问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内存越界&lt;/li&gt;&#xA;&lt;li&gt;内存读写保护&lt;/li&gt;&#xA;&lt;li&gt;缺页调入&lt;/li&gt;&#xA;&lt;li&gt;利用磁盘交换区实现以较小物理内存提供较大逻辑内存的效果&lt;/li&gt;&#xA;&lt;li&gt;栈段的生长&lt;/li&gt;&#xA;&lt;li&gt;多进程共享内存，写时复制&lt;/li&gt;&#xA;&lt;li&gt;LRU算法判断页有没有被访问&lt;/li&gt;&#xA;&lt;li&gt;淘汰页面时判断是否需要回写磁盘&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;进程的执行状态&#34;&gt;进程的执行状态&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程的系统数据&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
