<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>双向链表 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</link>
    <description>Recent content in 双向链表 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 08 Apr 2025 10:01:32 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leetcode hot100 146 LRU缓存</title>
      <link>https://y-m-m.github.io/post/leetcodehot146lru%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/leetcodehot146lru%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/lru-cache/description/?envType=study-plan-v2&amp;amp;envId=top-100-liked&#34;&gt;leetcode hot100 146 LRU缓存&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;题目&#34;&gt;题目&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。        &lt;br&gt;&#xA;实现 LRUCache 类：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存&lt;/li&gt;&#xA;&lt;li&gt;int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。&lt;/li&gt;&#xA;&lt;li&gt;void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。              &lt;br&gt;&#xA;函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;        &lt;br&gt;&#xA;[&amp;ldquo;LRUCache&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;get&amp;rdquo;]        &lt;br&gt;&#xA;[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]      &lt;br&gt;&#xA;&lt;strong&gt;输出&lt;/strong&gt;&#xA;[null, null, null, 1, null, -1, null, -1, 3, 4]             &lt;br&gt;&#xA;&lt;strong&gt;解释&lt;/strong&gt;&#xA;LRUCache lRUCache = new LRUCache(2);     &lt;br&gt;&#xA;lRUCache.put(1, 1); // 缓存是 {1=1}      &lt;br&gt;&#xA;lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}       &lt;br&gt;&#xA;lRUCache.get(1);    // 返回 1    &lt;br&gt;&#xA;lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}   &lt;br&gt;&#xA;lRUCache.get(2);    // 返回 -1 (未找到)      &lt;br&gt;&#xA;lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}   &lt;br&gt;&#xA;lRUCache.get(1);    // 返回 -1 (未找到)      &lt;br&gt;&#xA;lRUCache.get(3);    // 返回 3    &lt;br&gt;&#xA;lRUCache.get(4);    // 返回 4&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
