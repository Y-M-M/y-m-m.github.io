<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件工程 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
    <description>Recent content in 软件工程 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Jun 2025 22:07:02 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件工程</title>
      <link>https://y-m-m.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;第一章-软件工程概述&#34;&gt;第一章 软件工程概述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;软件定义        &lt;br&gt;&#xA;软件危机      &lt;br&gt;&#xA;什么是软件危机     &lt;br&gt;&#xA;为什么会出现软件危机       &lt;br&gt;&#xA;由于软件危机的出现，人们才发明了软件工程方法&#xA;软件工程三要素：方法、工具、过程&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机系统是指由硬件和软件组成，能够自动接收输入、处理数据并输出结果的系统。它以存储程序和数据为基础，通过中央处理单元(CPU)执行指令，完成各种计算和控制任务。计算机系统既包括物理设备，也包括其上的操作系统、应用程序等软件部分&lt;/li&gt;&#xA;&lt;li&gt;计算机系统的六个组成元素如下&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包括计算机系统的所有物理组件，如CPU、内存、主板、输入输出设备等，是计算机运行的基础平台&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指运行在硬件上的各种程序，包括操作系统、应用软件和开发工具等，负责管理资源并执行任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是计算机处理的原始信息，包括数字、文字、图像、音频等&lt;/li&gt;&#xA;&lt;li&gt;数据是计算过程的对象，其结构和编码方式对系统性能和功能有重要影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用户&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是使用计算机系统的人。用户通过输入设备与系统交互，发出命令并获取结果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网络&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是实现多台计算机之间通信的系统，包括局域网、广域网和互联网等，使得资源可以共享，信息可以远程传输&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;接口&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是系统各部分之间的连接方式，包括硬件接口(如USB, PCIe)、软件接口(如API)和人机接口(如图形界面)，保证系统内部和外部的协调运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;11-计算机软件&#34;&gt;1.1 计算机软件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件的定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合&lt;/li&gt;&#xA;&lt;li&gt;程序是按事先设计的功能和性能要求执行的指令序列；&lt;/li&gt;&#xA;&lt;li&gt;数据是使程序能正常操纵信息的数据结构；&lt;/li&gt;&#xA;&lt;li&gt;文档是与程序开发，维护和使用有关的图文材料&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件是一种逻辑实体，具有抽象性&lt;/li&gt;&#xA;&lt;li&gt;软件的开发是一种逻辑思维成熟的过程，无明显制造过程&lt;/li&gt;&#xA;&lt;li&gt;在软件的运行和使用期间，没有硬件那样的机械磨损，老化问题，但却存在退化问题&lt;/li&gt;&#xA;&lt;li&gt;软件的开发依然很原始，至今尚未完全摆脱手工艺的开发方式&lt;/li&gt;&#xA;&lt;li&gt;软件是高度复杂的逻辑体&lt;/li&gt;&#xA;&lt;li&gt;软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性&lt;/li&gt;&#xA;&lt;li&gt;软件成本相当昂贵&lt;/li&gt;&#xA;&lt;li&gt;相当多的软件工作涉及到社会因素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;12-软件的发展和软件危机&#34;&gt;1.2 软件的发展和软件危机&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件发展阶段&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序设计阶段： 20世纪50至60年代&lt;/li&gt;&#xA;&lt;li&gt;程序系统阶段： 20世纪60至70年代&lt;/li&gt;&#xA;&lt;li&gt;传统软件工程阶段：20世纪70～90年代&lt;/li&gt;&#xA;&lt;li&gt;现代软件工程阶段：20世纪90年代至今&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-19%2020.10.06.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;最根本的变化&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人们对软件有了新的认识&lt;/li&gt;&#xA;&lt;li&gt;软件需求是软件发展的动力&lt;/li&gt;&#xA;&lt;li&gt;软件工作的范围从只考虑程序的编写扩展到涉及整个软件生存期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发的高成本与软件产品的低质量之间的尖锐矛盾(软件技术发展第二阶段)&lt;/li&gt;&#xA;&lt;li&gt;软件危机（Software Crisis）：指由于落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机的表现&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发计划难以制订&lt;/li&gt;&#xA;&lt;li&gt;软件开发费用和进度失控&lt;/li&gt;&#xA;&lt;li&gt;软件产品无法让用户满意&lt;/li&gt;&#xA;&lt;li&gt;软件产品的质量难以保证&lt;/li&gt;&#xA;&lt;li&gt;软件通常没有适当的文档资料&lt;/li&gt;&#xA;&lt;li&gt;软件通常是不可维护的&lt;/li&gt;&#xA;&lt;li&gt;软件成本在计算机系统总成本中所占比例逐年上升&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;软件危机产生的内在原因&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件生产本身存在着复杂性&lt;/li&gt;&#xA;&lt;li&gt;软件开发和维护所使用的方法不合理&lt;/li&gt;&#xA;&lt;li&gt;解决途径：软件工程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;13-软件工程&#34;&gt;1.3 软件工程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要思想：按照工程化的原理、原则和方法开发、运行、维护软件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程是工程概念在软件领域里的一个特定应用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工程：将科学及数学原理运用于实际用途的应用手段，如：设计、制造、机器操纵、构架、系统等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程涉及软件产品的所有环节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程三要素&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为软件开发提供了“如何做”的技术。它包括了多方面的任务，如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为软件工程方法提供了自动的或半自动的软件支撑环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程的过程则是将软件工程的方法和工具综合起来以达到合理、及时地进行计算机软件开发的目的。过程定义了方法使用的顺序、要求交付的文档资料、为保证质量和协调变化所需要的管理、及软件开发各个阶段完成的里程碑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程的目标&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在给定成本、进度的前提下，开发出满足用户需求且具有 可修改性、有效性、可靠性、可理解性、可维护性、可重用性、可适应性、可移植性、可追踪性和可互操作性 的软件产品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程研究内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件开发方法学、开发过程模型、开发工具和软件工程环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件管理学、软件工程经济学、软件心理学等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程四条基本原则&#xA;&lt;ul&gt;&#xA;&lt;li&gt;选取适宜的开发模型&lt;/li&gt;&#xA;&lt;li&gt;采用合适的设计方法&lt;/li&gt;&#xA;&lt;li&gt;提供高质量的工程支持&lt;/li&gt;&#xA;&lt;li&gt;重视开发过程的管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程的一般原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;抽象&lt;/li&gt;&#xA;&lt;li&gt;信息隐藏&lt;/li&gt;&#xA;&lt;li&gt;模块化&lt;/li&gt;&#xA;&lt;li&gt;局部化&lt;/li&gt;&#xA;&lt;li&gt;确定性&lt;/li&gt;&#xA;&lt;li&gt;一致性&lt;/li&gt;&#xA;&lt;li&gt;完备性&lt;/li&gt;&#xA;&lt;li&gt;可验证性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程基本原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用分阶段的生命周期计划严格管理&lt;/li&gt;&#xA;&lt;li&gt;坚持进行阶段评审&lt;/li&gt;&#xA;&lt;li&gt;实行严格的产品控制(控制需求变动的影响)&lt;/li&gt;&#xA;&lt;li&gt;采用现代程序设计技术&lt;/li&gt;&#xA;&lt;li&gt;结果应能清楚地审查&lt;/li&gt;&#xA;&lt;li&gt;开发小组人员应少而精&lt;/li&gt;&#xA;&lt;li&gt;承认不断改进软件工程实践的意义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;14-软件工程知识体系&#34;&gt;1.4 软件工程知识体系&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件工程知识体系指南&lt;/li&gt;&#xA;&lt;li&gt;建立软件工程知识体系的一个目的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;促进世界范围内对软件工程的一致观点&lt;/li&gt;&#xA;&lt;li&gt;阐明软件工程相对其他学科(如计算机科学、项目管理、计算机工程和数学等)的关系，并确立它们的界线&lt;/li&gt;&#xA;&lt;li&gt;确定软件工程学科的内容&lt;/li&gt;&#xA;&lt;li&gt;确定软件工程本体知识的各个专题&lt;/li&gt;&#xA;&lt;li&gt;为相应的课程和职业资格认证材料的编写奠定基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件工程知识体系知识域&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件需求&lt;/li&gt;&#xA;&lt;li&gt;软件设计&lt;/li&gt;&#xA;&lt;li&gt;软件构造&lt;/li&gt;&#xA;&lt;li&gt;软件测试&lt;/li&gt;&#xA;&lt;li&gt;软件维护&lt;/li&gt;&#xA;&lt;li&gt;软件配置管理&lt;/li&gt;&#xA;&lt;li&gt;软件工程管理&lt;/li&gt;&#xA;&lt;li&gt;软件工程过程&lt;/li&gt;&#xA;&lt;li&gt;软件工程工具和方法&lt;/li&gt;&#xA;&lt;li&gt;软件质量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;第二章-软件生命周期模型&#34;&gt;第二章 软件生命周期模型&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;描述软件开发的规范化过程           &lt;br&gt;&#xA;六个基本活动            &lt;br&gt;&#xA;传统软件生命周期模型：瀑布模型、V模型和W模型、原型方法、演化模型（两次或多次开发来完成需求，不注重软件体系结构）、增量模型（每次的原型的体系结构保持唯一）、螺旋模型、喷泉模型          &lt;br&gt;&#xA;新型软件生命周期模型：RUP(UP，集合喷泉模型和增量模型的特点，适合需要反复明确需求的项目)、敏捷开发（相对于瀑布模型来说，敏捷宣言，极限编程）&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
