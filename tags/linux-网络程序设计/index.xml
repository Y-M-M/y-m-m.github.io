<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux 网络程序设计 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/linux-%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in Linux 网络程序设计 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 28 May 2025 09:30:53 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/linux-%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 网络程序设计</title>
      <link>https://y-m-m.github.io/post/linux_%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;socket概述&#34;&gt;Socket概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;socket&#34;&gt;Socket&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;协议栈实现&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传输层以上由用户态应用程序实现&lt;/li&gt;&#xA;&lt;li&gt;传输层和网络互联层协议在内核中实现（路由协议由用户态进程实现）&lt;/li&gt;&#xA;&lt;li&gt;第一第二层一般由硬件实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UNIX提供给应用程序使用网络功能的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BSD将设备和通信管道组织成文件方式，创建方式不同，访问方法相同&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端设备&lt;/li&gt;&#xA;&lt;li&gt;管道&lt;/li&gt;&#xA;&lt;li&gt;通信服务Socket&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AT&amp;amp;T UNIX的TLI编程接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Socket编程接口面向网络通信，不仅仅用于TCP/IP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用虚拟loopback接口(127.0.0.1)，可实现同台计算机进程间通信&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tcp与udp&#34;&gt;TCP与UDP&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TCP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向连接&lt;/li&gt;&#xA;&lt;li&gt;可靠&lt;/li&gt;&#xA;&lt;li&gt;字节流传输&lt;/li&gt;&#xA;&lt;li&gt;不保证报文边界&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UDP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向数据报&lt;/li&gt;&#xA;&lt;li&gt;不可靠&lt;/li&gt;&#xA;&lt;li&gt;数据报传输&lt;/li&gt;&#xA;&lt;li&gt;广播和组播&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;网络字节顺序&#34;&gt;网络字节顺序&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU字节顺序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Big Endian (大尾)，即将低位字节排在前&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Power PC，SPARC，Motorola&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Little Endian (小尾)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Intel X86&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网络字节顺序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;big endian (大尾) 排序方式 , 与X86相反&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网络字节转换的库函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;htonl ntohl 四字节整数(long)&lt;/li&gt;&#xA;&lt;li&gt;htons ntohs 两字节整数(short)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket系统调用&#34;&gt;socket系统调用&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;int socket( int family, int type, int protocol);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建socket文件描述符，端点名未指定&lt;/li&gt;&#xA;&lt;li&gt;family：协议栈，TCP/IP为AF_INET&lt;/li&gt;&#xA;&lt;li&gt;type：套接字类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;流式虚电路：SOCK_STREAM&lt;/li&gt;&#xA;&lt;li&gt;数据报：SOCK_DGRAM&lt;/li&gt;&#xA;&lt;li&gt;IP、ICMP：SOCK_RAW&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;protocol：协议（常为0），IPPROTO_TCP、 IPPROTO_UDP&lt;/li&gt;&#xA;&lt;li&gt;返回值：文件描述符sockfd&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int bind( int sockfd, struct sockaddr *name, int namelen)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为文件描述符sockfd设定本地端点名name，也可以用在客户端程序&lt;/li&gt;&#xA;&lt;li&gt;端口被其他进程占用时，失败返回-1&lt;/li&gt;&#xA;&lt;li&gt;传输层：端到端&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// AF_INE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;u_short&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// port number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;in_addr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// IP address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_zero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// unsed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;in_addr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;u_long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int connect( int sockfd, struct sockaddr *name, size_t name_len);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对应sockfd，设定&lt;strong&gt;对端&lt;/strong&gt;端点名到name&lt;/li&gt;&#xA;&lt;li&gt;TCP执行三次握手，等待对方应答，进程睡眠&lt;/li&gt;&#xA;&lt;li&gt;连接成功返回0，失败返回-1&lt;/li&gt;&#xA;&lt;li&gt;UDP:无连接建立，&lt;strong&gt;对端&lt;/strong&gt;端点名记录到内核中sockfd对应的数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int listen( int sockfd, int backlog);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开始监听到达的连接请求，连接到sockfd关联的端点名上&lt;/li&gt;&#xA;&lt;li&gt;backlog：最多的排队请求个数，常设为5&lt;/li&gt;&#xA;&lt;li&gt;不会阻塞，不负责数据通信&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int accept( int sockfd, struct sockaddr *name, int *namelen);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;接受一个连接请求，将远端端点名计入name&lt;/li&gt;&#xA;&lt;li&gt;依次取得在sockfd上排队的连接请求，建立并返回一个新的文件描述符&lt;/li&gt;&#xA;&lt;li&gt;若sockfd上无连接请求，accept调用被阻塞&lt;/li&gt;&#xA;&lt;li&gt;TCP三次握手结束后accept返回&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int read( int sockfd, void *buf, int nbyte);&lt;/li&gt;&#xA;&lt;li&gt;int write( int sockfd, void *buf, int nbyte);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在用户缓存buf和文件描述符sockfd对应的内核缓存之间搬送数据&lt;/li&gt;&#xA;&lt;li&gt;read ：读到数据就返回；接收缓存无数据则阻塞&lt;/li&gt;&#xA;&lt;li&gt;write：写完缓存就返回；发送连接忙则阻塞&lt;/li&gt;&#xA;&lt;li&gt;返回值：实际收到和写出的数据长度；出错返回-1；read返回0，表明连接被对方关闭&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int close( int sockfd);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关闭连接，释放文件描述符&lt;/li&gt;&#xA;&lt;li&gt;发送缓冲区不为空时：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认继续发送缓冲区中数据；&lt;/li&gt;&#xA;&lt;li&gt;系统调用setsockop可以设置sockfd的SO_LINGER选项，（设定时限后）直接丢弃缓冲区数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;tcp客户-服务器程序&#34;&gt;TCP客户-服务器程序&lt;/h1&gt;&#xA;&lt;h2 id=&#34;客户端程序&#34;&gt;客户端程序&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建文件描述符socket&lt;/li&gt;&#xA;&lt;li&gt;建立连接connect&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程阻塞，等待TCP连接建立&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;端点名的概念：IP地址+端口号&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本地端点名：可动态分配&lt;/li&gt;&#xA;&lt;li&gt;远端端点名：well-known port&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;发送数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;发送速率大于通信速率，进程会被阻塞&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;关闭连接&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;clientc&#34;&gt;client.c&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-28%2008.29.24.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-28%2008.32.11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
