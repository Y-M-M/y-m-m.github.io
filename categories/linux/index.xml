<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 陈皮的博客</title>
    <link>https://y-m-m.github.io/categories/linux/</link>
    <description>Recent content in Linux on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 24 Apr 2025 15:52:30 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux bash脚本及脚本程序设计</title>
      <link>https://y-m-m.github.io/post/linux_bash%E8%84%9A%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_bash%E8%84%9A%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;1-shell的基本机制&#34;&gt;1 shell的基本机制&lt;/h1&gt;&#xA;&lt;h2 id=&#34;关于shell&#34;&gt;关于shell&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell种类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;B-shell&lt;/li&gt;&#xA;&lt;li&gt;C-shell&lt;/li&gt;&#xA;&lt;li&gt;K-shell&lt;/li&gt;&#xA;&lt;li&gt;/bin/bash Linux上的标准shell&lt;/li&gt;&#xA;&lt;li&gt;管理员在创建用户时，设置了用户的登录shell&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;shell的功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell是命令解释器&lt;/li&gt;&#xA;&lt;li&gt;文件名替换，命令替换，变量替换&lt;/li&gt;&#xA;&lt;li&gt;历史替换&lt;/li&gt;&#xA;&lt;li&gt;别名替换&lt;/li&gt;&#xA;&lt;li&gt;流程控制的内部命令(内部命令和外部命令)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;shell的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要用途：批处理，执行效率比算法语言低&lt;/li&gt;&#xA;&lt;li&gt;shell编程风格和C语言等算法语言的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell是面向命令处理的语言，提供的流程控制结构通过对一些内部命令的解释实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如同C语言设计思路一样，shell本身设计的非常精炼，但是它提供了灵活的机制(策略与机制相分离)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell有许多灵活的功能，通过shell替换实现&lt;/li&gt;&#xA;&lt;li&gt;例如：流程控制所需的条件判断，四则运算，都由shell之外的命令完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;理解Unix的shell&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习bash的目的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在交互方式下：熟习shell的替换机制、转义机制，掌握循环等控制流程，可以编写符合命令&lt;/li&gt;&#xA;&lt;li&gt;非交互方式：编写shell脚本程序，把一系列操作，编纂成一个脚本文件，批量处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bash的启动&#34;&gt;bash的启动&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三种启动方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注册shell&lt;/li&gt;&#xA;&lt;li&gt;键入bash命令&lt;/li&gt;&#xA;&lt;li&gt;脚本解释器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自动执行的一批命令(用户偏好)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当bash作为注册shell被启动时，自动执行用户住目录下的.bash_profile文件中命令，~/.bash_profile或$HOME/.bash_profile&lt;/li&gt;&#xA;&lt;li&gt;当bash作为注册shell退出时：自动执行$HOME/.bash_logout&lt;/li&gt;&#xA;&lt;li&gt;当bash作为交互式shell启动时: 自动执行$HOME/.bashrc&lt;/li&gt;&#xA;&lt;li&gt;类似umask之类的命令，应当写在.profile文件中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自动执行的一批命令（系统级）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当bash作为注册shell被启动时:自动执行 /etc/profile文件中命令&lt;/li&gt;&#xA;&lt;li&gt;当bash作为交互式shell启动时: 自动执行 /etc/bash.bashrc&lt;/li&gt;&#xA;&lt;li&gt;当bash作为注册shell退出时:自动执行/etc/bash.bash.logout&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脚本文件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑文件lsdir (格式为文本文件，文件名不必须为.sh后缀，只是个惯例)&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.37.26.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脚本文件的执行&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新创建子进程，并在子进程中执行脚本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash&amp;lt;lsdir&lt;/li&gt;&#xA;&lt;li&gt;无法携带命令行参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法二&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash lsdir&lt;/li&gt;&#xA;&lt;li&gt;bash -x lsdir&lt;/li&gt;&#xA;&lt;li&gt;bash lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法三&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给文件设置可执行属性x：chmod u+x lsdir&lt;/li&gt;&#xA;&lt;li&gt;然后执行 ./lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;三种方法均启动程序/bin/bash，生成新进程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在当前shell中执行脚本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;. lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;source lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;脚本执行后对当前shell状态有影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;历史与别名&#34;&gt;历史与别名&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;历史表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先前键入的命令存在于历史表，编号递增，FIFO刷新&lt;/li&gt;&#xA;&lt;li&gt;历史表大小&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由变量HISTSIZE设定&lt;/li&gt;&#xA;&lt;li&gt;修改HISTSIZE的配置应放入~/.bashrc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看历史表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内部命令history&lt;/li&gt;&#xA;&lt;li&gt;文件 $HOME/.bash_history&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;历史替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人机交互时直接使用上下箭头键&lt;/li&gt;&#xA;&lt;li&gt;其他引用历史机制的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;!! 引用上一命令&lt;/li&gt;&#xA;&lt;li&gt;!str 以str开头的最近用过的命令，如:!v !m !.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;别名和别名替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在别名表中增加一个别名(内部命令 alias)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;alias dir=&amp;ldquo;ls -flad&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;alias n=&amp;ldquo;netstat -p tcp -s | head -10&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如果需要，应把alias命令放入.bashrc&lt;/li&gt;&#xA;&lt;li&gt;查看别名表alias&lt;/li&gt;&#xA;&lt;li&gt;取消别名(内部命令unalias)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;unalias n 在别名表中取消n&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TAB键补全&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每行的首个单词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TAB键补全搜索$PATH下的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行中的其它单词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TAB键补全当前目录下的文件名&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;输入重定向&#34;&gt;输入重定向&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从数据文件中获取stdin &amp;lt;filename&lt;/li&gt;&#xA;&lt;li&gt;&amp;laquo; word 从shell脚本获取数据直到遇到定界符word（ 允许替换）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat &amp;laquo; TOAST&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Now : &lt;code&gt;date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;My Home Directory is $HOME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TOAST&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;定界符所界定内容加工处理(等同双引号处理): 变量替换，命令替换&lt;/li&gt;&#xA;&lt;li&gt;从shell中获得stdin：不许替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat &amp;laquo; &amp;lsquo;TOAST&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Now : &lt;code&gt;date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;My Home Directory is $HOME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TOAST&lt;/li&gt;&#xA;&lt;li&gt;Pwd&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&amp;laquo;&amp;lt; word 从命令行获取信息作为标准输入&#xA;&lt;ul&gt;&#xA;&lt;li&gt;base64 &amp;laquo;&amp;lt; meiyoumima&lt;/li&gt;&#xA;&lt;li&gt;base64 &amp;laquo;&amp;lt; &amp;lsquo;mei you mi ma&amp;rsquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;输出重定向与管道&#34;&gt;输出重定向与管道&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序的标准输入/输出&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.54.39.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用系统调用(原始I/O)&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.56.32.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用库函数&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.59.44.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量名stdin, stdout, stderr用于C语言调用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;stdout输出重定向&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;filename 将stdout重定向到文件filename，文件已存在则先清空（覆盖方式）&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 文件系统管理</title>
      <link>https://y-m-m.github.io/post/linux_%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;文件管理&#34;&gt;文件管理&lt;/h1&gt;&#xA;&lt;h2 id=&#34;列出文件目录-ls&#34;&gt;列出文件目录 ls&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不给实参时，列出当前目录下所有文件和目录&lt;/li&gt;&#xA;&lt;li&gt;实参为文件时，列出文件项&lt;/li&gt;&#xA;&lt;li&gt;实参为目录时，列出目录下所有文件项&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;-F (Flag)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若列出的是目录，就在名字后面缀以/&lt;/li&gt;&#xA;&lt;li&gt;若列出的是可执行文件，就在名字后面缀以*&lt;/li&gt;&#xA;&lt;li&gt;若列出的是符号连接文件，就在名字后面缀以符号@&lt;/li&gt;&#xA;&lt;li&gt;若列出的是普通文件，则在名字后面无任何标记&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;-l 长格式列表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-rwxr-x&amp;ndash;x l liang stud 519 Jul 5 15:02 arg&lt;/li&gt;&#xA;&lt;li&gt;第一列 文件属性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一字符：文件类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-普通文件&lt;/li&gt;&#xA;&lt;li&gt;b块设备文件&lt;/li&gt;&#xA;&lt;li&gt;d目录文件&lt;/li&gt;&#xA;&lt;li&gt;c自负设备文件&lt;/li&gt;&#xA;&lt;li&gt;l符号连接文件&lt;/li&gt;&#xA;&lt;li&gt;p命名管道文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文件的访问权限&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2-4字符 文件所有者对文件的访问权限&lt;/li&gt;&#xA;&lt;li&gt;5-7字符 同组用户对文件的访问权限&lt;/li&gt;&#xA;&lt;li&gt;8-10字符 其他用户对文件的访问权限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第二列 文件link数，涉及到此文件的目录项数&lt;/li&gt;&#xA;&lt;li&gt;第三列，第四列 文件主的名字和组名&lt;/li&gt;&#xA;&lt;li&gt;第五列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通磁盘文件：列出文件大小(字节数)&lt;/li&gt;&#xA;&lt;li&gt;目录：列出目录表大小，不是目录下文件长度和&lt;/li&gt;&#xA;&lt;li&gt;符号连接文件：列出符号连接文件自身的长度&lt;/li&gt;&#xA;&lt;li&gt;字符设备和块设备文件：列出主设备号和次设备号&lt;/li&gt;&#xA;&lt;li&gt;管道文件：列出管道内的数据长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第六列 文件最后一次被修改的日期和时间&lt;/li&gt;&#xA;&lt;li&gt;第七列 文件名&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于符号连接文件，附带列出符号连接文件的内容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;-h 以便于人阅读的方式打印数值&lt;/li&gt;&#xA;&lt;li&gt;-d 当ls的参数是目录时，不像默认情况那样列出目录下的文件，二是列出目录自身的信息&lt;/li&gt;&#xA;&lt;li&gt;-a 列出文件名首字母为圆点的文件&lt;/li&gt;&#xA;&lt;li&gt;-A 功能与-a相同，但不列出.和..&lt;/li&gt;&#xA;&lt;li&gt;-s 列出文件占用的磁盘空间&lt;/li&gt;&#xA;&lt;li&gt;-i 列出文件的i节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;拷贝文件-cp&#34;&gt;拷贝文件 cp&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cp file1 file2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;file2不存在：创建&lt;/li&gt;&#xA;&lt;li&gt;file2是文件：覆盖&lt;/li&gt;&#xA;&lt;li&gt;file2存在且是目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;cp file1 file2 &amp;hellip; filen dir&#xA;&lt;ul&gt;&#xA;&lt;li&gt;dir必须是一个目录，并且已存在&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cp a.c a.bak&lt;/li&gt;&#xA;&lt;li&gt;cp a.c b.c backup.d&lt;/li&gt;&#xA;&lt;li&gt;cp *.c backup.d&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX中实际执行cp a1.c a2.c b1.c b2.c backup.d&lt;/li&gt;&#xA;&lt;li&gt;与Windows命令COPY *.C BAK.D执行结果相同，过程不同&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;cp backup.d/p*.c&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实际执行：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cp backup.d/p1.c backup.d/p2.c&lt;/li&gt;&#xA;&lt;li&gt;结果：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;backup.d目录下文件p1.c将覆盖掉p2.c&lt;/li&gt;&#xA;&lt;li&gt;（与Windows的copy backup.d\p*.c执行结果不同，Windows的命令会把这两个备份文件拷贝回当前目录）将这两个文件拷贝回当前目录下的正确用法： cp backup.d/p*.c .&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;移动文件-mv&#34;&gt;移动文件 mv&lt;/h2&gt;&#xA;&lt;p&gt;TODO&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
