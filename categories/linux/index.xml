<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 陈皮的博客</title>
    <link>https://y-m-m.github.io/categories/linux/</link>
    <description>Recent content in Linux on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 28 May 2025 09:30:53 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 网络程序设计</title>
      <link>https://y-m-m.github.io/post/linux_%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;socket概述&#34;&gt;Socket概述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;socket&#34;&gt;Socket&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;协议栈实现&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传输层以上由用户态应用程序实现&lt;/li&gt;&#xA;&lt;li&gt;传输层和网络互联层协议在内核中实现（路由协议由用户态进程实现）&lt;/li&gt;&#xA;&lt;li&gt;第一第二层一般由硬件实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UNIX提供给应用程序使用网络功能的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BSD将设备和通信管道组织成文件方式，创建方式不同，访问方法相同&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端设备&lt;/li&gt;&#xA;&lt;li&gt;管道&lt;/li&gt;&#xA;&lt;li&gt;通信服务Socket&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AT&amp;amp;T UNIX的TLI编程接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Socket编程接口面向网络通信，不仅仅用于TCP/IP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用虚拟loopback接口(127.0.0.1)，可实现同台计算机进程间通信&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tcp与udp&#34;&gt;TCP与UDP&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TCP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向连接&lt;/li&gt;&#xA;&lt;li&gt;可靠&lt;/li&gt;&#xA;&lt;li&gt;字节流传输&lt;/li&gt;&#xA;&lt;li&gt;不保证报文边界&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UDP&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向数据报&lt;/li&gt;&#xA;&lt;li&gt;不可靠&lt;/li&gt;&#xA;&lt;li&gt;数据报传输&lt;/li&gt;&#xA;&lt;li&gt;广播和组播&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;网络字节顺序&#34;&gt;网络字节顺序&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU字节顺序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Big Endian (大尾)，即将低位字节排在前&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Power PC，SPARC，Motorola&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Little Endian (小尾)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Intel X86&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网络字节顺序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;big endian (大尾) 排序方式 , 与X86相反&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;网络字节转换的库函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;htonl ntohl 四字节整数(long)&lt;/li&gt;&#xA;&lt;li&gt;htons ntohs 两字节整数(short)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;socket系统调用&#34;&gt;socket系统调用&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;int socket( int family, int type, int protocol);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建socket文件描述符，端点名未指定&lt;/li&gt;&#xA;&lt;li&gt;family：协议栈，TCP/IP为AF_INET&lt;/li&gt;&#xA;&lt;li&gt;type：套接字类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;流式虚电路：SOCK_STREAM&lt;/li&gt;&#xA;&lt;li&gt;数据报：SOCK_DGRAM&lt;/li&gt;&#xA;&lt;li&gt;IP、ICMP：SOCK_RAW&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;protocol：协议（常为0），IPPROTO_TCP、 IPPROTO_UDP&lt;/li&gt;&#xA;&lt;li&gt;返回值：文件描述符sockfd&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int bind( int sockfd, struct sockaddr *name, int namelen)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为文件描述符sockfd设定本地端点名name，也可以用在客户端程序&lt;/li&gt;&#xA;&lt;li&gt;端口被其他进程占用时，失败返回-1&lt;/li&gt;&#xA;&lt;li&gt;传输层：端到端&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// AF_INE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;u_short&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// port number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;in_addr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// IP address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin_zero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// unsed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;in_addr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;u_long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int connect( int sockfd, struct sockaddr *name, size_t name_len);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对应sockfd，设定&lt;strong&gt;对端&lt;/strong&gt;端点名到name&lt;/li&gt;&#xA;&lt;li&gt;TCP执行三次握手，等待对方应答，进程睡眠&lt;/li&gt;&#xA;&lt;li&gt;连接成功返回0，失败返回-1&lt;/li&gt;&#xA;&lt;li&gt;UDP:无连接建立，&lt;strong&gt;对端&lt;/strong&gt;端点名记录到内核中sockfd对应的数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int listen( int sockfd, int backlog);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开始监听到达的连接请求，连接到sockfd关联的端点名上&lt;/li&gt;&#xA;&lt;li&gt;backlog：最多的排队请求个数，常设为5&lt;/li&gt;&#xA;&lt;li&gt;不会阻塞，不负责数据通信&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int accept( int sockfd, struct sockaddr *name, int *namelen);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;接受一个连接请求，将远端端点名计入name&lt;/li&gt;&#xA;&lt;li&gt;依次取得在sockfd上排队的连接请求，建立并返回一个新的文件描述符&lt;/li&gt;&#xA;&lt;li&gt;若sockfd上无连接请求，accept调用被阻塞&lt;/li&gt;&#xA;&lt;li&gt;TCP三次握手结束后accept返回&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int read( int sockfd, void *buf, int nbyte);&lt;/li&gt;&#xA;&lt;li&gt;int write( int sockfd, void *buf, int nbyte);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在用户缓存buf和文件描述符sockfd对应的内核缓存之间搬送数据&lt;/li&gt;&#xA;&lt;li&gt;read ：读到数据就返回；接收缓存无数据则阻塞&lt;/li&gt;&#xA;&lt;li&gt;write：写完缓存就返回；发送连接忙则阻塞&lt;/li&gt;&#xA;&lt;li&gt;返回值：实际收到和写出的数据长度；出错返回-1；read返回0，表明连接被对方关闭&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;int close( int sockfd);&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关闭连接，释放文件描述符&lt;/li&gt;&#xA;&lt;li&gt;发送缓冲区不为空时：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认继续发送缓冲区中数据；&lt;/li&gt;&#xA;&lt;li&gt;系统调用setsockop可以设置sockfd的SO_LINGER选项，（设定时限后）直接丢弃缓冲区数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;tcp客户-服务器程序&#34;&gt;TCP客户-服务器程序&lt;/h1&gt;&#xA;&lt;h2 id=&#34;客户端程序&#34;&gt;客户端程序&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建文件描述符socket&lt;/li&gt;&#xA;&lt;li&gt;建立连接connect&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程阻塞，等待TCP连接建立&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;端点名的概念：IP地址+端口号&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本地端点名：可动态分配&lt;/li&gt;&#xA;&lt;li&gt;远端端点名：well-known port&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;发送数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;发送速率大于通信速率，进程会被阻塞&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;关闭连接&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;clientc&#34;&gt;client.c&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-28%2008.29.24.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-28%2008.32.11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 文本文件处理</title>
      <link>https://y-m-m.github.io/post/linux_%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;文本文件及其处理工具&#34;&gt;文本文件及其处理工具&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux中的文本信息&#xA;&lt;ul&gt;&#xA;&lt;li&gt;文本文件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C语言，Java语言等编程文件的源程序语言&lt;/li&gt;&#xA;&lt;li&gt;文本格式的数据文件&lt;/li&gt;&#xA;&lt;li&gt;文本格式的文字信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;程序输出&lt;/li&gt;&#xA;&lt;li&gt;系统配置信息&#xA;&lt;ul&gt;&#xA;&lt;li&gt;/etc下的配置文件（功能类似windows的注册表）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文本型网络协议 因特网大部分传输层以上的协议是文本型协议&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会话层协议：HTTP，POP3，SMTP，IMAP，&lt;/li&gt;&#xA;&lt;li&gt;表示层协议：HTML，XML，MIME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文本文件处理的命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux提供大量的文本文件处理的命令&lt;/li&gt;&#xA;&lt;li&gt;多数命令都有复杂的选项&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程的标准输入/输出，重定向，管道&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程的基本概念&#xA;&lt;ul&gt;&#xA;&lt;li&gt;进程与程序&lt;/li&gt;&#xA;&lt;li&gt;进程的生命周期&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程的输入输出&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标准输入stdin&lt;/li&gt;&#xA;&lt;li&gt;标准输出stdout&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;重定向机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输出重定向&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ls –l &amp;gt; filelist.txt&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;输入重定向&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sort &amp;lt; filelist.txt&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;管道机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ls –l | sort&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;重定向机制和管道机制的重要性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文本文件处理命令的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不指定处理对象文件名时，从标准输入获得数据&lt;/li&gt;&#xA;&lt;li&gt;指定处理对象文件名时，从文件中获取数据&lt;/li&gt;&#xA;&lt;li&gt;多数命令可以指定多个文件&lt;/li&gt;&#xA;&lt;li&gt;处理结果在标准输出显示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;考虑的因素&#xA;&lt;ul&gt;&#xA;&lt;li&gt;标准输入/标准输出&lt;/li&gt;&#xA;&lt;li&gt;shell的文件通配符&lt;/li&gt;&#xA;&lt;li&gt;输入输出重定向&lt;/li&gt;&#xA;&lt;li&gt;管道&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;灵活性：工具命令的组合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux倾向于提供独立的多个精巧的工具命令，数据格式为文本信息&lt;/li&gt;&#xA;&lt;li&gt;鼓励使用重定向或管道机制将多个工具命令组合在一起，提供灵活的功能&lt;/li&gt;&#xA;&lt;li&gt;应用系统设计时，也应该考虑到这些特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例如：数据库内容的展示，直接输出多列文本，考虑到各种工具软件的使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文件读取与处理的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;more/less：逐屏显示文件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;历史&#xA;&lt;ul&gt;&#xA;&lt;li&gt;more：最先由BSD UNIX开发&lt;/li&gt;&#xA;&lt;li&gt;less：Linux上广泛使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;more shudu.c 指定一个文件&lt;/li&gt;&#xA;&lt;li&gt;more *.[ch] 指定多个文件&lt;/li&gt;&#xA;&lt;li&gt;ls -l | more 指定0个文件&lt;/li&gt;&#xA;&lt;li&gt;less shudu.c&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;满屏后，显示&amp;ndash;more&amp;ndash;或&amp;ndash;more&amp;ndash;(15%)，可以使用more命令&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-17%2010.47.15.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;Linux系统中的命令less&#xA;&lt;ul&gt;&#xA;&lt;li&gt;less is more&lt;/li&gt;&#xA;&lt;li&gt;回退浏览的功能更强&lt;/li&gt;&#xA;&lt;li&gt;可直接使键盘的上下箭头键，或者j,k，类似vi的光标定位键，以及PgUp，PgDn，Home，End键&lt;/li&gt;&#xA;&lt;li&gt;有的Unix系统不提供less命令，但是可利用more命令的增强功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;cat与od：列出文件内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本功能与命名&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat concatenate:串结，文本格式打印 （选项-n：行号）&lt;/li&gt;&#xA;&lt;li&gt;od octal dump逐字节打印（-c, -t c, -t x1，-t d1, -t u1选项）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat tryl.c 命令行参数1个&lt;/li&gt;&#xA;&lt;li&gt;cat –n shudu.c&lt;/li&gt;&#xA;&lt;li&gt;cat tryl.c tryx.c try.h 命令行参数3个&lt;/li&gt;&#xA;&lt;li&gt;cat &amp;gt; try 命令行参数=0个，从stdin获取数据，直到ctrl-d&lt;/li&gt;&#xA;&lt;li&gt;cat tryl.c try2.c try.h &amp;gt; trysrc&lt;/li&gt;&#xA;&lt;li&gt;cat makefile *.[ch] &amp;gt; src&lt;/li&gt;&#xA;&lt;li&gt;od –t x1 x.dat 以十六进制打印文件x.dat各字节&lt;/li&gt;&#xA;&lt;li&gt;od –t x1 x.dat | more 以十六进制打印文件x.dat各字节&lt;/li&gt;&#xA;&lt;li&gt;od –c /bin/bash 逐字符方式打印文件，遇到不可打印字符打印编码&lt;/li&gt;&#xA;&lt;li&gt;echo abcdABCD | od –t x1 十六进制分开显示字符的ASCII码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;head与tail：显示文件的头部或者尾部&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认只选择10行，-n选项可以选择行数&lt;/li&gt;&#xA;&lt;li&gt;head –n 15 ab.c&#xA;&lt;ul&gt;&#xA;&lt;li&gt;显示文件ab.c中前15行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;head –n 23 a.c b.c c.c | more&#xA;&lt;ul&gt;&#xA;&lt;li&gt;显示三个文件各自的前23行共显示69行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;tail –n 40 liu.mail&lt;/li&gt;&#xA;&lt;li&gt;head –n -20 msg.c 除去文件尾部20行其余均算“头”&lt;/li&gt;&#xA;&lt;li&gt;tail –n +20 msg.c 除去文件头部20行其余均算作“尾”&lt;/li&gt;&#xA;&lt;li&gt;tail -f debug.txt 实时打印文件尾部被追加的内容（选项-f:forever）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;netstat -s -t| head -n 20 显示tcp协议的统计数据&lt;/li&gt;&#xA;&lt;li&gt;ls -s | sort | head –n 20&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;tee：三通&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将从标准输入stdin得到的数据抄送到标准输出stdout显示，同时存入磁盘文件中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;./myap | tee myap.log&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;wc：字计数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;列出文件中一共有多少行，有多少个单词，多少字符&lt;/li&gt;&#xA;&lt;li&gt;当指定的文件数大于1时，最后还列出一个合计&lt;/li&gt;&#xA;&lt;li&gt;常用选项-l：只列出行计数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;wc sum.c （1个文件）&lt;/li&gt;&#xA;&lt;li&gt;wc x.c makefile stat.sh （多个文件）&lt;/li&gt;&#xA;&lt;li&gt;wc -l *.c makefile start.sh&lt;/li&gt;&#xA;&lt;li&gt;ps -ef | wc -l （以标准输入作为输入；可用于统计系统中进程总数）&lt;/li&gt;&#xA;&lt;li&gt;ps -ef | grep liang | wc -l （和liang相关的进程个数）&lt;/li&gt;&#xA;&lt;li&gt;who | wc -l （当前系统登录用户个数）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;sort：对文件内容排序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sort选项&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-n选项(Numberic):对于数字按照算术值大小排序，而不是按照字符串比较规则，例如123与67&lt;/li&gt;&#xA;&lt;li&gt;可以选择行中某一部分作为排序关键字&lt;/li&gt;&#xA;&lt;li&gt;选择升序或降序（-r）&lt;/li&gt;&#xA;&lt;li&gt;字符串比较时对字母是否区分大小写&lt;/li&gt;&#xA;&lt;li&gt;内排序外排序等算法参数选择（当数据量较大时，性能调优）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sort telno &amp;gt; telno1&lt;/li&gt;&#xA;&lt;li&gt;ls -s | sort | tail –10&lt;/li&gt;&#xA;&lt;li&gt;ls -s | sort -n | tail –10&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;tr：翻译字符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;tr string1 string2&lt;/li&gt;&#xA;&lt;li&gt;把标准输入拷贝到标准输出，string1中出现的字符替换为string2中的对应字符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat telnos | tr UVX uvx&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例：用［］指定一个集合&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat report | tr &amp;lsquo;[a-z]&amp;rsquo; &amp;lsquo;[A-Z]&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;将小写字母改为大写字母&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例：用\加三个八进制数字(类似C语言)表示一字符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat file1 | tr % &amp;lsquo;\012&amp;rsquo; 将%改为换行符,注意不要漏掉必需的单引号&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;uniq：筛选文件中的重复行&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;uniq options&lt;/li&gt;&#xA;&lt;li&gt;uniq options input-file&lt;/li&gt;&#xA;&lt;li&gt;uniq options input-file output-file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;重复的行：紧邻的两行内容相同&lt;/li&gt;&#xA;&lt;li&gt;选项&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-u （uniqe）只保留没有重复的行&lt;/li&gt;&#xA;&lt;li&gt;-d （duplicated）只保留有重复的行（但只打印一次）&lt;/li&gt;&#xA;&lt;li&gt;没有以上两个选项，打印没有重复的行和有重复的行(但只打印一次)&lt;/li&gt;&#xA;&lt;li&gt;-c （count）计数同样的行出现几次&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Linux 开始使用Linux</title>
      <link>https://y-m-m.github.io/post/linux_%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8linux/</link>
      <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8linux/</guid>
      <description>&lt;h1 id=&#34;linux前传&#34;&gt;Linux前传&lt;/h1&gt;&#xA;&lt;h2 id=&#34;计算机系统的组成&#34;&gt;计算机系统的组成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.17.14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统的发展&#xA;&lt;ul&gt;&#xA;&lt;li&gt;手工操作，1946 ~ 50年代（电子管）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机昂贵，用户为专业人员；编程语言为机器语言&lt;/li&gt;&#xA;&lt;li&gt;输入输出用纸带或卡片；用户独占全机，资源利用率低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;单道批处理操作系统，50年代末 ~ 60年代中（晶体管）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用磁带把多个程序编成执行序列，可使用汇编语言开发&lt;/li&gt;&#xA;&lt;li&gt;问题：慢速的输入输出处理仍直接由CPU完成，输入输出时，CPU处于等待状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;多道批处理系统(Multiprogrammed Batch Processing System)，60年代中 ~ 70年代中（集成电路）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用多道批处理提高资源的利用率。&lt;/li&gt;&#xA;&lt;li&gt;问题：提高了CPU利用率，用户交互性差&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分时系统(time-sharing system)，70年代中期至今&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分时共享：多个程序分时共享CPU资源&lt;/li&gt;&#xA;&lt;li&gt;按时间片(time slice)分配：多个程序在CPU上执行的轮换时间&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.19.04.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;多道程序需要的硬件支持: 中断与通道技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中断&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU收到外部信号后，停止原来工作，转去处理该事件，完毕后回到原来断点继续工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通道：专用的I/O处理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制I/O设备与内存间的数据传输，启动后独立于CPU运行，实现CPU与I/O的并行&lt;/li&gt;&#xA;&lt;li&gt;DMA 直接内存存取，Direct Memory Access&lt;/li&gt;&#xA;&lt;li&gt;CPM 通信处理器， communication process module&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实现多道程序需要的硬件支持：内存管制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储器管理单元MMU&lt;/li&gt;&#xA;&lt;li&gt;多道程序的加载&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序采用虚拟地址，以保证多道同时运行的程序可以在内存中的重定位（虚实地址转换）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内存保护&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免同时运行在内存中的程序互相影响（越界/越权）&lt;/li&gt;&#xA;&lt;li&gt;CPU设置核心态/用户态&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用程序工作在用户态，仅允许访问程序自己的内存，越界则产生中断&lt;/li&gt;&#xA;&lt;li&gt;操作系统内核工作在特权级别（核心态），可随意访问所有内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统调用和系统命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU可以工作在用户态或核心态&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.23.04.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;系统调用(System call)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内核的编程接口：应用程序调用操作系统提供的功能&lt;/li&gt;&#xA;&lt;li&gt;用户态程序无法直接使用核心态程序，一般系统调用采用软件中断(trap)方式，CPU进入核心态执行&lt;/li&gt;&#xA;&lt;li&gt;操作系统程序（狭义的，指内核）的调用时机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以认为操作系统就是所有中断服务程序的集合，包括硬件中断和软件中断&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统调用与普通函数调用的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在UNIX系统中，都以C语言函数方式给出&lt;/li&gt;&#xA;&lt;li&gt;实现普通函数调用的代码在CPU用户态下运行，包含在可执行程序内，使用CALL指令，利用堆栈实现，函数调用结束后返回调用处的下一条语句（库函数与自定义函数，printf）&lt;/li&gt;&#xA;&lt;li&gt;实现系统调用功能的代码在内核中，用户程序通过使用INT指令产生软中断进入内核执行，使用进程的核心态堆栈，执行完毕后中断返回（write）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统自带的命令也是利用系统调用设计的应用程序，与普通的应用程序具有相同地位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用软件和设备驱动程序开发&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用软件开发SDK&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接使用系统调用(如：UNIX)&lt;/li&gt;&#xA;&lt;li&gt;将系统调用封装为函数库API(如Win32)&lt;/li&gt;&#xA;&lt;li&gt;使用框架，如：MFC&lt;/li&gt;&#xA;&lt;li&gt;应用软件运行时CPU处于用户态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;设备驱动程序开发DDK&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统中对设备分类，例如：网卡，磁盘，显示器，打印机，声卡，音频输入，视频输入&lt;/li&gt;&#xA;&lt;li&gt;每类设备设计一种抽象的接口，包括多个函数&lt;/li&gt;&#xA;&lt;li&gt;设备驱动程序操纵硬件，处理中断，提供这类设备接口规定的一组函数。函数的调用时机由操作系统决定&lt;/li&gt;&#xA;&lt;li&gt;设备驱动程序工作在CPU特权级，驱动程序的BUG可能会导致整个系统崩溃&lt;/li&gt;&#xA;&lt;li&gt;一般设备驱动程序通过动态链接的方式链接入内核&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;操作系统在计算机系统中的地位&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.26.16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;linux发展过程&#34;&gt;Linux发展过程&lt;/h1&gt;&#xA;&lt;h1 id=&#34;系统登录与退出&#34;&gt;系统登录与退出&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字符终端&#34;&gt;字符终端&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX/Linux是多用户系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机连接多台字符终端&lt;/li&gt;&#xA;&lt;li&gt;字符终端作为交互式输入输出设备&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;终端的构成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;键盘&lt;/li&gt;&#xA;&lt;li&gt;显示器&lt;/li&gt;&#xA;&lt;li&gt;RS232串行通信接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机与终端的连接&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机中的串口卡（硬件）引出多个RS232串口&lt;/li&gt;&#xA;&lt;li&gt;每个RS232接口通过电缆（3芯或更多芯）连接一台终端&lt;/li&gt;&#xA;&lt;li&gt;RS232电缆的长度限制&lt;/li&gt;&#xA;&lt;li&gt;早期要求小于10米&lt;/li&gt;&#xA;&lt;li&gt;现在可达百米&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;终端与主机的功能分工&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端:主机的输入和输出设备&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端通过电缆把用户的按键信息送到主机，把主机发来的信息在屏幕上显示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机:程序和数据的存储及处理驱动程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据及程序存放在主机的硬盘上，程序的运行也都由主机内的CPU占用主机内存来完成&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.31.40.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行律与驱动程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;驱动程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不同的硬件需要不同的驱动程序&lt;/li&gt;&#xA;&lt;li&gt;与行律模块的接口：上行和下行字符流&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行律的作用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一行内字符的缓冲、回显与编辑，直到按下回车键&lt;/li&gt;&#xA;&lt;li&gt;数据加工，如：将\n （换行）转化为\r\n （回车换行）&lt;/li&gt;&#xA;&lt;li&gt;将Ctrl-C字符转化为中止进程运行的信号(signal)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机与终端之间的通信过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.33.17.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;终端转义序列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;转义字符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Esc：ASCII码1B（十进制27，八进制033）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机发往终端方向数据中的转义序列的功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制光标位置、字符颜色、字符大小等等&lt;/li&gt;&#xA;&lt;li&gt;选择终端的字符集&lt;/li&gt;&#xA;&lt;li&gt;控制终端上的打印机、刷卡机、磁条器、密码键盘&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Esc[2J  由主机发送到终端的四字节序列：1B 5B 32 4A 功能：清除屏幕&lt;/li&gt;&#xA;&lt;li&gt;Esc[8A 四字节序列，光标上移8行&lt;/li&gt;&#xA;&lt;li&gt;Esc[16;8H 七字节序列，光标移到16行8列&lt;/li&gt;&#xA;&lt;li&gt;Esc[1;31m 七字节序列，红色字符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;终端类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义一组转移序列以及相对应的操作&lt;/li&gt;&#xA;&lt;li&gt;例如：ansi, vt100, vt220等等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机和终端之间的类型匹配&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机根据终端类型，实现相应功能时发送对应的控制码；当终端类型不对时，可能全屏幕操作失败&lt;/li&gt;&#xA;&lt;li&gt;通过转义序列还可以控制终端上的打印机、光笔、刷卡机、磁条器、密码键盘&lt;/li&gt;&#xA;&lt;li&gt;终端上的功能键&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机和终端之间的流量控制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必要性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端的显示速度跟不上主机的发送速度&lt;/li&gt;&#xA;&lt;li&gt;主机送来数据终端需要打印出来，但打印速度慢&lt;/li&gt;&#xA;&lt;li&gt;主机送来的显示内容，需暂停显示，仔细分析&lt;/li&gt;&#xA;&lt;li&gt;需要一种机制控制主机方向来的数据流量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;两种流控方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RS232接口的CTS信号线（Clear To Send，可以发送）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用流控字符Xon和Xoff&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ctrl-S和Ctrl-Q&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件流量控制的方式（利用流控字符Xon和Xoff）&lt;/li&gt;&#xA;&lt;li&gt;终端希望主机暂停发送数据时，发Xoff字符&lt;/li&gt;&#xA;&lt;li&gt;终端希望主机继续发送数据时，发Xon字符&lt;/li&gt;&#xA;&lt;li&gt;Xoff/Xon控制字符分别被定义为ASCII码的17和19，对应键盘按键Ctrl-S和Ctrl-Q，手动流控&#xA;&lt;ul&gt;&#xA;&lt;li&gt;按下Ctrl-S键暂停显示，按Ctrl-Q键继续显示&lt;/li&gt;&#xA;&lt;li&gt;按下Ctrl-S后暂停显示，有的终端按任意键继续，而有的终端要求必须按下Ctrl-Q后才继续显示，否则其它按键都不能使得终端继续显示。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;仿真终端和虚拟终端&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仿真终端&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PC机串口，运行终端仿真软件来仿真终端。&lt;/li&gt;&#xA;&lt;li&gt;例如: DOS操作系统下的CrossTalk, Windows中的“超级终端”&lt;/li&gt;&#xA;&lt;li&gt;仿真的内容包括实现终端的转义码序列功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;虚拟终端&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX主机与PC机通过网络相连，客户端运行telnet，服务器端telnetd，成为UNIX的一个基于TCP通信的虚拟终端&lt;/li&gt;&#xA;&lt;li&gt;安全终端，在TCP连接上加密和压缩数据，如：Windows客户端软件SecureCRT&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2010.09.28.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;登录&#xA;&lt;ul&gt;&#xA;&lt;li&gt;root用户（超级用户）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;root不受权限的制约，可随意修改和删除文件&lt;/li&gt;&#xA;&lt;li&gt;普通用户受权限制约&lt;/li&gt;&#xA;&lt;li&gt;root用户误删重要文件可能带来严重后果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;申请帐号（也叫登录名或用户名）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由系统管理员创建用户（如：useradd命令）&lt;/li&gt;&#xA;&lt;li&gt;用户从任意终端上登录进入系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;登录过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;出现登录提示符login：后，键入登录名&lt;/li&gt;&#xA;&lt;li&gt;给出提示password：输入口令，不回显&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Shell提示符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;登录成功&#xA;&lt;ul&gt;&#xA;&lt;li&gt;登录成功后出现Shell提示符，如同DOS的C&amp;gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;常见Shell的提示符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$ Bourne Shell (/bin/sh)&lt;/li&gt;&#xA;&lt;li&gt;% C Shell (/bin/csh)&lt;/li&gt;&#xA;&lt;li&gt;$ Korn Shell (/bin/ksh)&lt;/li&gt;&#xA;&lt;li&gt;# 当前用户为超级用户root（操作时要小心）&lt;/li&gt;&#xA;&lt;li&gt;同DOS一样，Shell提示符可以根据用户的需要和喜好，通过Shell命令改变&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;关机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在关机前必须执行关机命令shutdown&#xA;&lt;ul&gt;&#xA;&lt;li&gt;突然关掉电源，可能会导致文件数据丢失&lt;/li&gt;&#xA;&lt;li&gt;例：内核的文件高速缓冲区。关机命令的功能之一是将高速缓冲区数据真正写到磁盘上&lt;/li&gt;&#xA;&lt;li&gt;仅特权用户有此权限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;死机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unix系统稳定，应用程序不该导致死机&lt;/li&gt;&#xA;&lt;li&gt;死机现象是由于系统内核态程序有问题，常常是一些外设的驱动程序有BUG&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;使用系统命令&#34;&gt;使用系统命令&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Shell提示符下就可以键入UNIX命令&lt;/li&gt;&#xA;&lt;li&gt;与Windows不同的是组成命令的英文字母大小写有区别&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;查阅联机手册&#34;&gt;查阅联机手册&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;联机手册内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;各种命令的说明书&lt;/li&gt;&#xA;&lt;li&gt;系统调用的使用手册&lt;/li&gt;&#xA;&lt;li&gt;C语言和其它语言的库函数手册&lt;/li&gt;&#xA;&lt;li&gt;系统配置文件格式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命令：man&lt;/li&gt;&#xA;&lt;li&gt;命令名man，取自manual的前三个字母，UNIX中最常用命令一般由两到三个字母构成&lt;/li&gt;&#xA;&lt;li&gt;分页器：q-退出，空格-下一页，上下箭头-上移下移&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;man命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;man 命令的用法&lt;/li&gt;&#xA;&lt;li&gt;man name&lt;/li&gt;&#xA;&lt;li&gt;man section name 区分不同section中的同一个name&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一般章节编号：1 命令；2 系统调用； 3 库函数；5 配置文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;man -k regexp&#xA;&lt;ul&gt;&#xA;&lt;li&gt;列出与关键字(keyword)正则表达式regexp相关的手册目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;手册页内容&#xA;&lt;ul&gt;&#xA;&lt;li&gt;列出基本功能和语法格式&lt;/li&gt;&#xA;&lt;li&gt;对于C语言的调用列出头文件和链接函数库&lt;/li&gt;&#xA;&lt;li&gt;功能说明&lt;/li&gt;&#xA;&lt;li&gt;SEE ALSO: 有关的其它项目的名字和章节号&lt;/li&gt;&#xA;&lt;li&gt;所遵循的UNIX标准&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;date读取系统日期和时间&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读取系统日期和时间： 命令date&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Wed Mar 1 14:23:37 CST 2017&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;可以根据需要定制输出格式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;date &amp;ldquo;+%Y.%m.%d %H:%M:%S Day %j&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;2017.03.01 14:24:02 Day 060&lt;/li&gt;&#xA;&lt;li&gt;date &amp;ldquo;+%s&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;1488349495&#xA;&lt;ul&gt;&#xA;&lt;li&gt;060指的是今天是今年的第60天&lt;/li&gt;&#xA;&lt;li&gt;格式控制字符串：第一个字母必须为+号，%Y代表年号，%m代表月份，%M代表分钟&lt;/li&gt;&#xA;&lt;li&gt;%s 秒坐标（从UTC1970开始），常用于计算时间间隔&lt;/li&gt;&#xA;&lt;li&gt;UNIX的命令往往有很多选项和复杂的功能，通过man date查阅联机手册&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通过NTP协议校对系统时间：命令 ntpdate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ntpdate 0.pool.ntp.org (设置时间，必须root用户)&lt;/li&gt;&#xA;&lt;li&gt;ntpdate–q 0.pool.ntp.org (查询时间，普通用户也可以)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;who：确定有谁在系统中&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命令who: 列出当前已登录入系统的用户&#xA;&lt;ul&gt;&#xA;&lt;li&gt;wujian tty00 Jul 5 14:49&lt;/li&gt;&#xA;&lt;li&gt;sun tty01 Jul 5 11:31&lt;/li&gt;&#xA;&lt;li&gt;liang tty03 Jul 5 15:50&lt;/li&gt;&#xA;&lt;li&gt;liang ttyp02 Jul 5 15:50&lt;/li&gt;&#xA;&lt;li&gt;dong tty11 Jul 5 09:45&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第一列：用户名；第二列：终端设备的设备文件名&lt;/li&gt;&#xA;&lt;li&gt;设备在文件系统中有一个文件名（同普通磁盘文件不同的是文件类型属于特殊文件），一般设备文件放于目录/dev下。终端设备文件的名字一般为tty* （Windows中的设备文件CON）&lt;/li&gt;&#xA;&lt;li&gt;命令tty 可以打印出当前终端的设备文件名&lt;/li&gt;&#xA;&lt;li&gt;命令who am i 可以列出当前终端上的登录用户&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;uptime，w和sar&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命令uptime&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统自启动后到现在的运行时间（年龄）&lt;/li&gt;&#xA;&lt;li&gt;当前登录入系统的用户数&lt;/li&gt;&#xA;&lt;li&gt;近期1分钟，5分钟，15分钟内系统CPU的负载（平均调度队列长度）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;w命令（Who &amp;amp; What）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;列出终端的空闲时间（IDLE）&lt;/li&gt;&#xA;&lt;li&gt;JCPU：终端上正在运行的作业占用的CPU时间（包括前台程序和后台程序）&lt;/li&gt;&#xA;&lt;li&gt;PCPU：终端上正在运行的前台程序占用CPU时间&lt;/li&gt;&#xA;&lt;li&gt;WHAT列出终端上的用户正在执行什么命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;sar命令(system activity report)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;打印系统活动报告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;其他：top，htop，nmon等监控系统性能的工具&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-17%2009.06.52.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ps命令：进程信息的一次性快照&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查阅进程状态(process status)(实际上就是将内核中进程状态信息有选择地打印出来)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;选项&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于控制列表的行数(进程范围)和列数(每进程列出的属性内容)&lt;/li&gt;&#xA;&lt;li&gt;无选项：只列出在当前终端上启动的进程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;列出的项目有：PID，TTY，TIME，COMMAND&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;e选项：列出系统中所有的进程(进程范围)&lt;/li&gt;&#xA;&lt;li&gt;f选项：以full格式列出每一个进程(控制列的数目)&lt;/li&gt;&#xA;&lt;li&gt;l选项：以long格式列出每一个进程(控制列的数目)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;命令ps列出的进程属性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UID：用户ID(注册名)&lt;/li&gt;&#xA;&lt;li&gt;PID：进程ID&lt;/li&gt;&#xA;&lt;li&gt;PPID：父进程的PID&lt;/li&gt;&#xA;&lt;li&gt;C：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况&lt;/li&gt;&#xA;&lt;li&gt;STIME：启动时间&lt;/li&gt;&#xA;&lt;li&gt;SZ：进程逻辑内存大小(Size)&lt;/li&gt;&#xA;&lt;li&gt;TTY：终端的名字&lt;/li&gt;&#xA;&lt;li&gt;COMMAND：命令名&lt;/li&gt;&#xA;&lt;li&gt;WCHAN：进程在内核的何处睡眠(Wait Channel)&lt;/li&gt;&#xA;&lt;li&gt;TIME：累计执行时间(占用CPU的时间)&lt;/li&gt;&#xA;&lt;li&gt;PRI：优先级&lt;/li&gt;&#xA;&lt;li&gt;S：状态，S(Sleep)，R(Run)， Z(Zombie)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;top命令：进程动态监控&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-17%2009.15.25.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PR: 进程优先级，越小越优先；NI：进程优先级值可被修正数据值&lt;/li&gt;&#xA;&lt;li&gt;VIRT: 进程逻辑地址空间大小(virtual)，VIRT=SWAP+RES&lt;/li&gt;&#xA;&lt;li&gt;RES: 驻留内存数(Resident),也就是占用物理内存数，RES=CODE+DATA&lt;/li&gt;&#xA;&lt;li&gt;S: 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程&lt;/li&gt;&#xA;&lt;li&gt;SHR：与其他进程共享的内存数(Share)&lt;/li&gt;&#xA;&lt;li&gt;%CPU：占用CPU百分比；%MEM：占用内存百分比&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;free检查系统内存使用情况&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-17%2009.18.23.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一行：内存总数506MB，已使用490MB, 空闲15MB&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux为提高效率利用程序不用的内存缓冲磁盘信息，当前有62MB的buffer和133M的cache&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第二行：不计buffers/cache,程序用掉了295MB,有210MB空闲&lt;/li&gt;&#xA;&lt;li&gt;第三行：打印了磁盘Swap区的使用情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;vmstat检查系统负载&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-17%2009.19.57.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Procs&#xA;&lt;ul&gt;&#xA;&lt;li&gt;r 运行或等待运行的进程数&lt;/li&gt;&#xA;&lt;li&gt;b 处在非中断睡眠状态的进程数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Memory&#xA;&lt;ul&gt;&#xA;&lt;li&gt;swpd 交换分区使用情况 free 空闲的内存&lt;/li&gt;&#xA;&lt;li&gt;buff/cache : 被用来做为缓存的内存数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Swap 磁盘/内存的交换页数量，单位：KB/秒&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IO 块设备I/O块数，单位：块/秒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;System&#xA;&lt;ul&gt;&#xA;&lt;li&gt;in: 每秒的硬件中断数(interrupt)，包括时钟中断&lt;/li&gt;&#xA;&lt;li&gt;cs: 每秒的环境切换次数(context switch)，程序间的跳转&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;CPU 按CPU 的总使用百分比来显示&#xA;&lt;ul&gt;&#xA;&lt;li&gt;us=user, sy=system,id=idle，wa=wait for disk I/O&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Top：可以看到整体情况，也可以看到每个任务消耗资源的情况。 Vmstat：查看队列中的任务书、进程上下文切换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;passwd：更换口令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通用户&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用passwd命令更改自己的上机口令，在更改前系统会先验证原来的口令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;超级用户&#xA;&lt;ul&gt;&#xA;&lt;li&gt;修改口令之前不验证旧的口令&lt;/li&gt;&#xA;&lt;li&gt;可修改自己的口令，还可强迫设置其它用户口令&lt;/li&gt;&#xA;&lt;li&gt;命令passwd liu&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将用户liu的口令强迫设置为某一已知口令&lt;/li&gt;&#xA;&lt;li&gt;超级用户无法读取其它用户的口令&lt;/li&gt;&#xA;&lt;li&gt;当普通用户忘记口令时，可请求超级用户强设口令&lt;/li&gt;&#xA;&lt;li&gt;修改超级用户root的口令时要特别注意&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;口令的选取&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;口令信息的保存：不存储明码口令&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-17%2009.28.15.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;口令的验证方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安全性：无法由哈希值倒推出口令原文&lt;/li&gt;&#xA;&lt;li&gt;文件/etc/passwd, /etc/shadow&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;与其他主机通信的几个命令&#34;&gt;与其他主机通信的几个命令&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;telnet或ssh：远程登录&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 进程控制与进程之间的通信</title>
      <link>https://y-m-m.github.io/post/linux_%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;h1 id=&#34;进程的基本概念&#34;&gt;进程的基本概念&lt;/h1&gt;&#xA;&lt;h2 id=&#34;进程的基本概念和逻辑内存&#34;&gt;进程的基本概念和逻辑内存&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程与程序&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指令和数据的集合&lt;/li&gt;&#xA;&lt;li&gt;存放在磁盘上的一个普通文件里&lt;/li&gt;&#xA;&lt;li&gt;文件的i节点中标为可执行，内容符合系统要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包括指令段、用户数据段和系统数据段的执行环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程与程序的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序用于初始化进程的指令段和用户数据段，初始化后，进程和初始化它的程序之间无联系&lt;/li&gt;&#xA;&lt;li&gt;进程运行时磁盘上的程序文件不可修改/删除&lt;/li&gt;&#xA;&lt;li&gt;同时运行的多个进程可由统一程序初始化得到，进程之间没什么联系。内核通过安排它们共享指令段甚至不同程序的进程共享函数库(动态链接)以节省内存，但这种安排对用户来说是透明的&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.08.25.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程的组成部分&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;四部分：指令段、数据段、栈段和系统数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指令段Text&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序的CPU指令代码,包括：主程序和子程序编译后的CPU指令代码，以及调用的库函数代码&lt;/li&gt;&#xA;&lt;li&gt;指令段的大小固定不变，只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用户数据段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局变量，静态(static)变量，字符串常数&lt;/li&gt;&#xA;&lt;li&gt;允许数据段增长和缩小，实现内存的动态分配&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统调用sbrk()允许编程调整数据段的大小（调整单位为“页”）&lt;/li&gt;&#xA;&lt;li&gt;内存管理库函数，如：malloc()，free()&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;sbrk vs. malloc&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.12.48.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sbrk&lt;/li&gt;&#xA;&lt;li&gt;malloc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用户栈段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序执行所需要的栈空间，实现函数的调用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于保存子程序返回地址&lt;/li&gt;&#xA;&lt;li&gt;在函数和被调函数之间传递参数&lt;/li&gt;&#xA;&lt;li&gt;函数体内部定义的变量(静态变量除外)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;main函数得到的命令行参数以及环境参数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放在栈的最底部&lt;/li&gt;&#xA;&lt;li&gt;main函数运行之前，这些部分就已经被系统初始化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;栈段的动态增长与增长限制（getrlimit, setrlimit）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统数据段&#xA;&lt;ul&gt;&#xA;&lt;li&gt;上述三部分在进程私有的独立的逻辑地址空间内（CPU用户态访问）&lt;/li&gt;&#xA;&lt;li&gt;系统数据段是内核内的数据，每个进程对应一套&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包括页表和进程控制块PCB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;进程虚拟地址空间的布局&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.17.21.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;size命令观察可执行程序的段大小&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;size filename-list 列出程序或目标文件的相应段大小&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.22.42.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Pentinum虚拟地址到物理地址转换&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.23.37.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个4K是一个页&lt;/li&gt;&#xA;&lt;li&gt;VPN页号&lt;/li&gt;&#xA;&lt;li&gt;VPO业内偏移量&lt;/li&gt;&#xA;&lt;li&gt;术语&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.30.52.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;两级页表&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.31.37.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;虚实地址转换&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.35.07.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;PDE （Page Directory Entry）&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.35.59.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;PTE （Page Table Entry）&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-30%2008.36.26.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;PDE与PTE中的标志位能解决的问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内存越界&lt;/li&gt;&#xA;&lt;li&gt;内存读写保护&lt;/li&gt;&#xA;&lt;li&gt;缺页调入&lt;/li&gt;&#xA;&lt;li&gt;利用磁盘交换区实现以较小物理内存提供较大逻辑内存的效果&lt;/li&gt;&#xA;&lt;li&gt;栈段的生长&lt;/li&gt;&#xA;&lt;li&gt;多进程共享内存，写时复制&lt;/li&gt;&#xA;&lt;li&gt;LRU算法判断页有没有被访问&lt;/li&gt;&#xA;&lt;li&gt;淘汰页面时判断是否需要回写磁盘&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;进程的执行状态&#34;&gt;进程的执行状态&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程的系统数据&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux bash脚本及脚本程序设计</title>
      <link>https://y-m-m.github.io/post/linux_bash%E8%84%9A%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_bash%E8%84%9A%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;1-shell的基本机制&#34;&gt;1 shell的基本机制&lt;/h1&gt;&#xA;&lt;h2 id=&#34;关于shell&#34;&gt;关于shell&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell种类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;B-shell&lt;/li&gt;&#xA;&lt;li&gt;C-shell&lt;/li&gt;&#xA;&lt;li&gt;K-shell&lt;/li&gt;&#xA;&lt;li&gt;/bin/bash Linux上的标准shell&lt;/li&gt;&#xA;&lt;li&gt;管理员在创建用户时，设置了用户的登录shell&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;shell的功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell是命令解释器&lt;/li&gt;&#xA;&lt;li&gt;文件名替换，命令替换，变量替换&lt;/li&gt;&#xA;&lt;li&gt;历史替换&lt;/li&gt;&#xA;&lt;li&gt;别名替换&lt;/li&gt;&#xA;&lt;li&gt;流程控制的内部命令(内部命令和外部命令)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;shell的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要用途：批处理，执行效率比算法语言低&lt;/li&gt;&#xA;&lt;li&gt;shell编程风格和C语言等算法语言的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell是面向命令处理的语言，提供的流程控制结构通过对一些内部命令的解释实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如同C语言设计思路一样，shell本身设计的非常精炼，但是它提供了灵活的机制(策略与机制相分离)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell有许多灵活的功能，通过shell替换实现&lt;/li&gt;&#xA;&lt;li&gt;例如：流程控制所需的条件判断，四则运算，都由shell之外的命令完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;理解Unix的shell&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习bash的目的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在交互方式下：熟习shell的替换机制、转义机制，掌握循环等控制流程，可以编写符合命令&lt;/li&gt;&#xA;&lt;li&gt;非交互方式：编写shell脚本程序，把一系列操作，编纂成一个脚本文件，批量处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bash的启动&#34;&gt;bash的启动&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三种启动方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注册shell&lt;/li&gt;&#xA;&lt;li&gt;键入bash命令&lt;/li&gt;&#xA;&lt;li&gt;脚本解释器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自动执行的一批命令(用户偏好)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当bash作为注册shell被启动时，自动执行用户住目录下的.bash_profile文件中命令，~/.bash_profile或$HOME/.bash_profile&lt;/li&gt;&#xA;&lt;li&gt;当bash作为注册shell退出时：自动执行$HOME/.bash_logout&lt;/li&gt;&#xA;&lt;li&gt;当bash作为交互式shell启动时: 自动执行$HOME/.bashrc&lt;/li&gt;&#xA;&lt;li&gt;类似umask之类的命令，应当写在.profile文件中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自动执行的一批命令（系统级）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当bash作为注册shell被启动时:自动执行 /etc/profile文件中命令&lt;/li&gt;&#xA;&lt;li&gt;当bash作为交互式shell启动时: 自动执行 /etc/bash.bashrc&lt;/li&gt;&#xA;&lt;li&gt;当bash作为注册shell退出时:自动执行/etc/bash.bash.logout&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脚本文件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑文件lsdir (格式为文本文件，文件名不必须为.sh后缀，只是个惯例)&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.37.26.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脚本文件的执行&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新创建子进程，并在子进程中执行脚本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash&amp;lt;lsdir&lt;/li&gt;&#xA;&lt;li&gt;无法携带命令行参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法二&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash lsdir&lt;/li&gt;&#xA;&lt;li&gt;bash -x lsdir&lt;/li&gt;&#xA;&lt;li&gt;bash lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法三&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给文件设置可执行属性x：chmod u+x lsdir&lt;/li&gt;&#xA;&lt;li&gt;然后执行 ./lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;三种方法均启动程序/bin/bash，生成新进程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在当前shell中执行脚本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;. lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;source lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;脚本执行后对当前shell状态有影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;历史与别名&#34;&gt;历史与别名&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;历史表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先前键入的命令存在于历史表，编号递增，FIFO刷新&lt;/li&gt;&#xA;&lt;li&gt;历史表大小&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由变量HISTSIZE设定&lt;/li&gt;&#xA;&lt;li&gt;修改HISTSIZE的配置应放入~/.bashrc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看历史表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内部命令history&lt;/li&gt;&#xA;&lt;li&gt;文件 $HOME/.bash_history&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;历史替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人机交互时直接使用上下箭头键&lt;/li&gt;&#xA;&lt;li&gt;其他引用历史机制的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;!! 引用上一命令&lt;/li&gt;&#xA;&lt;li&gt;!str 以str开头的最近用过的命令，如:!v !m !.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;别名和别名替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在别名表中增加一个别名(内部命令 alias)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;alias dir=&amp;ldquo;ls -flad&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;alias n=&amp;ldquo;netstat -p tcp -s | head -10&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如果需要，应把alias命令放入.bashrc&lt;/li&gt;&#xA;&lt;li&gt;查看别名表alias&lt;/li&gt;&#xA;&lt;li&gt;取消别名(内部命令unalias)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;unalias n 在别名表中取消n&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TAB键补全&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每行的首个单词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TAB键补全搜索$PATH下的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行中的其它单词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TAB键补全当前目录下的文件名&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;输入重定向&#34;&gt;输入重定向&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从数据文件中获取stdin &amp;lt;filename&lt;/li&gt;&#xA;&lt;li&gt;&amp;laquo; word 从shell脚本获取数据直到遇到定界符word（ 允许替换）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat &amp;laquo; TOAST&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Now : &lt;code&gt;date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;My Home Directory is $HOME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TOAST&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;定界符所界定内容加工处理(等同双引号处理): 变量替换，命令替换&lt;/li&gt;&#xA;&lt;li&gt;从shell中获得stdin：不许替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat &amp;laquo; &amp;lsquo;TOAST&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Now : &lt;code&gt;date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;My Home Directory is $HOME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TOAST&lt;/li&gt;&#xA;&lt;li&gt;Pwd&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&amp;laquo;&amp;lt; word 从命令行获取信息作为标准输入&#xA;&lt;ul&gt;&#xA;&lt;li&gt;base64 &amp;laquo;&amp;lt; meiyoumima&lt;/li&gt;&#xA;&lt;li&gt;base64 &amp;laquo;&amp;lt; &amp;lsquo;mei you mi ma&amp;rsquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;输出重定向与管道&#34;&gt;输出重定向与管道&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序的标准输入/输出&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.54.39.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用系统调用(原始I/O)&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.56.32.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用库函数&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.59.44.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量名stdin, stdout, stderr用于C语言调用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;stdout输出重定向&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;filename 将stdout重定向到文件filename，文件已存在则先清空（覆盖方式）&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 文件系统管理</title>
      <link>https://y-m-m.github.io/post/linux_%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;文件管理&#34;&gt;文件管理&lt;/h1&gt;&#xA;&lt;h2 id=&#34;列出文件目录-ls&#34;&gt;列出文件目录 ls&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不给实参时，列出当前目录下所有文件和目录&lt;/li&gt;&#xA;&lt;li&gt;实参为文件时，列出文件项&lt;/li&gt;&#xA;&lt;li&gt;实参为目录时，列出目录下所有文件项&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;-F (Flag)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;若列出的是目录，就在名字后面缀以/&lt;/li&gt;&#xA;&lt;li&gt;若列出的是可执行文件，就在名字后面缀以*&lt;/li&gt;&#xA;&lt;li&gt;若列出的是符号连接文件，就在名字后面缀以符号@&lt;/li&gt;&#xA;&lt;li&gt;若列出的是普通文件，则在名字后面无任何标记&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;-l 长格式列表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-rwxr-x&amp;ndash;x l liang stud 519 Jul 5 15:02 arg&lt;/li&gt;&#xA;&lt;li&gt;第一列 文件属性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一字符：文件类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-普通文件&lt;/li&gt;&#xA;&lt;li&gt;b块设备文件&lt;/li&gt;&#xA;&lt;li&gt;d目录文件&lt;/li&gt;&#xA;&lt;li&gt;c自负设备文件&lt;/li&gt;&#xA;&lt;li&gt;l符号连接文件&lt;/li&gt;&#xA;&lt;li&gt;p命名管道文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;文件的访问权限&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2-4字符 文件所有者对文件的访问权限&lt;/li&gt;&#xA;&lt;li&gt;5-7字符 同组用户对文件的访问权限&lt;/li&gt;&#xA;&lt;li&gt;8-10字符 其他用户对文件的访问权限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第二列 文件link数，涉及到此文件的目录项数&lt;/li&gt;&#xA;&lt;li&gt;第三列，第四列 文件主的名字和组名&lt;/li&gt;&#xA;&lt;li&gt;第五列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通磁盘文件：列出文件大小(字节数)&lt;/li&gt;&#xA;&lt;li&gt;目录：列出目录表大小，不是目录下文件长度和&lt;/li&gt;&#xA;&lt;li&gt;符号连接文件：列出符号连接文件自身的长度&lt;/li&gt;&#xA;&lt;li&gt;字符设备和块设备文件：列出主设备号和次设备号&lt;/li&gt;&#xA;&lt;li&gt;管道文件：列出管道内的数据长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第六列 文件最后一次被修改的日期和时间&lt;/li&gt;&#xA;&lt;li&gt;第七列 文件名&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于符号连接文件，附带列出符号连接文件的内容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;-h 以便于人阅读的方式打印数值&lt;/li&gt;&#xA;&lt;li&gt;-d 当ls的参数是目录时，不像默认情况那样列出目录下的文件，二是列出目录自身的信息&lt;/li&gt;&#xA;&lt;li&gt;-a 列出文件名首字母为圆点的文件&lt;/li&gt;&#xA;&lt;li&gt;-A 功能与-a相同，但不列出.和..&lt;/li&gt;&#xA;&lt;li&gt;-s 列出文件占用的磁盘空间&lt;/li&gt;&#xA;&lt;li&gt;-i 列出文件的i节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;拷贝文件-cp&#34;&gt;拷贝文件 cp&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cp file1 file2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;file2不存在：创建&lt;/li&gt;&#xA;&lt;li&gt;file2是文件：覆盖&lt;/li&gt;&#xA;&lt;li&gt;file2存在且是目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;cp file1 file2 &amp;hellip; filen dir&#xA;&lt;ul&gt;&#xA;&lt;li&gt;dir必须是一个目录，并且已存在&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cp a.c a.bak&lt;/li&gt;&#xA;&lt;li&gt;cp a.c b.c backup.d&lt;/li&gt;&#xA;&lt;li&gt;cp *.c backup.d&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX中实际执行cp a1.c a2.c b1.c b2.c backup.d&lt;/li&gt;&#xA;&lt;li&gt;与Windows命令COPY *.C BAK.D执行结果相同，过程不同&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;cp backup.d/p*.c&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实际执行：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cp backup.d/p1.c backup.d/p2.c&lt;/li&gt;&#xA;&lt;li&gt;结果：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;backup.d目录下文件p1.c将覆盖掉p2.c&lt;/li&gt;&#xA;&lt;li&gt;（与Windows的copy backup.d\p*.c执行结果不同，Windows的命令会把这两个备份文件拷贝回当前目录）将这两个文件拷贝回当前目录下的正确用法： cp backup.d/p*.c .&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;移动文件-mv&#34;&gt;移动文件 mv&lt;/h2&gt;&#xA;&lt;p&gt;TODO&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
