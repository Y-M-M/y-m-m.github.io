<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开始使用Linux on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8linux/</link>
    <description>Recent content in 开始使用Linux on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 May 2025 10:12:13 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 开始使用Linux</title>
      <link>https://y-m-m.github.io/post/linux_%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8linux/</link>
      <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8linux/</guid>
      <description>&lt;h1 id=&#34;linux前传&#34;&gt;Linux前传&lt;/h1&gt;&#xA;&lt;h2 id=&#34;计算机系统的组成&#34;&gt;计算机系统的组成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.17.14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统的发展&#xA;&lt;ul&gt;&#xA;&lt;li&gt;手工操作，1946 ~ 50年代（电子管）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机昂贵，用户为专业人员；编程语言为机器语言&lt;/li&gt;&#xA;&lt;li&gt;输入输出用纸带或卡片；用户独占全机，资源利用率低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;单道批处理操作系统，50年代末 ~ 60年代中（晶体管）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用磁带把多个程序编成执行序列，可使用汇编语言开发&lt;/li&gt;&#xA;&lt;li&gt;问题：慢速的输入输出处理仍直接由CPU完成，输入输出时，CPU处于等待状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;多道批处理系统(Multiprogrammed Batch Processing System)，60年代中 ~ 70年代中（集成电路）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用多道批处理提高资源的利用率。&lt;/li&gt;&#xA;&lt;li&gt;问题：提高了CPU利用率，用户交互性差&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分时系统(time-sharing system)，70年代中期至今&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分时共享：多个程序分时共享CPU资源&lt;/li&gt;&#xA;&lt;li&gt;按时间片(time slice)分配：多个程序在CPU上执行的轮换时间&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.19.04.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;多道程序需要的硬件支持: 中断与通道技术&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中断&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU收到外部信号后，停止原来工作，转去处理该事件，完毕后回到原来断点继续工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;通道：专用的I/O处理器&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制I/O设备与内存间的数据传输，启动后独立于CPU运行，实现CPU与I/O的并行&lt;/li&gt;&#xA;&lt;li&gt;DMA 直接内存存取，Direct Memory Access&lt;/li&gt;&#xA;&lt;li&gt;CPM 通信处理器， communication process module&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;实现多道程序需要的硬件支持：内存管制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储器管理单元MMU&lt;/li&gt;&#xA;&lt;li&gt;多道程序的加载&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序采用虚拟地址，以保证多道同时运行的程序可以在内存中的重定位（虚实地址转换）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;内存保护&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免同时运行在内存中的程序互相影响（越界/越权）&lt;/li&gt;&#xA;&lt;li&gt;CPU设置核心态/用户态&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用程序工作在用户态，仅允许访问程序自己的内存，越界则产生中断&lt;/li&gt;&#xA;&lt;li&gt;操作系统内核工作在特权级别（核心态），可随意访问所有内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统调用和系统命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU可以工作在用户态或核心态&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.23.04.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;系统调用(System call)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内核的编程接口：应用程序调用操作系统提供的功能&lt;/li&gt;&#xA;&lt;li&gt;用户态程序无法直接使用核心态程序，一般系统调用采用软件中断(trap)方式，CPU进入核心态执行&lt;/li&gt;&#xA;&lt;li&gt;操作系统程序（狭义的，指内核）的调用时机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以认为操作系统就是所有中断服务程序的集合，包括硬件中断和软件中断&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统调用与普通函数调用的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在UNIX系统中，都以C语言函数方式给出&lt;/li&gt;&#xA;&lt;li&gt;实现普通函数调用的代码在CPU用户态下运行，包含在可执行程序内，使用CALL指令，利用堆栈实现，函数调用结束后返回调用处的下一条语句（库函数与自定义函数，printf）&lt;/li&gt;&#xA;&lt;li&gt;实现系统调用功能的代码在内核中，用户程序通过使用INT指令产生软中断进入内核执行，使用进程的核心态堆栈，执行完毕后中断返回（write）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;系统命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统自带的命令也是利用系统调用设计的应用程序，与普通的应用程序具有相同地位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用软件和设备驱动程序开发&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用软件开发SDK&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直接使用系统调用(如：UNIX)&lt;/li&gt;&#xA;&lt;li&gt;将系统调用封装为函数库API(如Win32)&lt;/li&gt;&#xA;&lt;li&gt;使用框架，如：MFC&lt;/li&gt;&#xA;&lt;li&gt;应用软件运行时CPU处于用户态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;设备驱动程序开发DDK&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作系统中对设备分类，例如：网卡，磁盘，显示器，打印机，声卡，音频输入，视频输入&lt;/li&gt;&#xA;&lt;li&gt;每类设备设计一种抽象的接口，包括多个函数&lt;/li&gt;&#xA;&lt;li&gt;设备驱动程序操纵硬件，处理中断，提供这类设备接口规定的一组函数。函数的调用时机由操作系统决定&lt;/li&gt;&#xA;&lt;li&gt;设备驱动程序工作在CPU特权级，驱动程序的BUG可能会导致整个系统崩溃&lt;/li&gt;&#xA;&lt;li&gt;一般设备驱动程序通过动态链接的方式链接入内核&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;操作系统在计算机系统中的地位&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.26.16.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;linux发展过程&#34;&gt;Linux发展过程&lt;/h1&gt;&#xA;&lt;h1 id=&#34;系统登录与退出&#34;&gt;系统登录与退出&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字符终端&#34;&gt;字符终端&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX/Linux是多用户系统&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机连接多台字符终端&lt;/li&gt;&#xA;&lt;li&gt;字符终端作为交互式输入输出设备&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;终端的构成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;键盘&lt;/li&gt;&#xA;&lt;li&gt;显示器&lt;/li&gt;&#xA;&lt;li&gt;RS232串行通信接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机与终端的连接&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机中的串口卡（硬件）引出多个RS232串口&lt;/li&gt;&#xA;&lt;li&gt;每个RS232接口通过电缆（3芯或更多芯）连接一台终端&lt;/li&gt;&#xA;&lt;li&gt;RS232电缆的长度限制&lt;/li&gt;&#xA;&lt;li&gt;早期要求小于10米&lt;/li&gt;&#xA;&lt;li&gt;现在可达百米&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;终端与主机的功能分工&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端:主机的输入和输出设备&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端通过电缆把用户的按键信息送到主机，把主机发来的信息在屏幕上显示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机:程序和数据的存储及处理驱动程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据及程序存放在主机的硬盘上，程序的运行也都由主机内的CPU占用主机内存来完成&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.31.40.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行律与驱动程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;驱动程序&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不同的硬件需要不同的驱动程序&lt;/li&gt;&#xA;&lt;li&gt;与行律模块的接口：上行和下行字符流&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行律的作用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一行内字符的缓冲、回显与编辑，直到按下回车键&lt;/li&gt;&#xA;&lt;li&gt;数据加工，如：将\n （换行）转化为\r\n （回车换行）&lt;/li&gt;&#xA;&lt;li&gt;将Ctrl-C字符转化为中止进程运行的信号(signal)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机与终端之间的通信过程&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2009.33.17.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;终端转义序列&#xA;&lt;ul&gt;&#xA;&lt;li&gt;转义字符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Esc：ASCII码1B（十进制27，八进制033）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机发往终端方向数据中的转义序列的功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制光标位置、字符颜色、字符大小等等&lt;/li&gt;&#xA;&lt;li&gt;选择终端的字符集&lt;/li&gt;&#xA;&lt;li&gt;控制终端上的打印机、刷卡机、磁条器、密码键盘&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;举例&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Esc[2J  由主机发送到终端的四字节序列：1B 5B 32 4A 功能：清除屏幕&lt;/li&gt;&#xA;&lt;li&gt;Esc[8A 四字节序列，光标上移8行&lt;/li&gt;&#xA;&lt;li&gt;Esc[16;8H 七字节序列，光标移到16行8列&lt;/li&gt;&#xA;&lt;li&gt;Esc[1;31m 七字节序列，红色字符&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;终端类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义一组转移序列以及相对应的操作&lt;/li&gt;&#xA;&lt;li&gt;例如：ansi, vt100, vt220等等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机和终端之间的类型匹配&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主机根据终端类型，实现相应功能时发送对应的控制码；当终端类型不对时，可能全屏幕操作失败&lt;/li&gt;&#xA;&lt;li&gt;通过转义序列还可以控制终端上的打印机、光笔、刷卡机、磁条器、密码键盘&lt;/li&gt;&#xA;&lt;li&gt;终端上的功能键&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;主机和终端之间的流量控制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必要性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;终端的显示速度跟不上主机的发送速度&lt;/li&gt;&#xA;&lt;li&gt;主机送来数据终端需要打印出来，但打印速度慢&lt;/li&gt;&#xA;&lt;li&gt;主机送来的显示内容，需暂停显示，仔细分析&lt;/li&gt;&#xA;&lt;li&gt;需要一种机制控制主机方向来的数据流量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;两种流控方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;硬件方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RS232接口的CTS信号线（Clear To Send，可以发送）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;软件方式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用流控字符Xon和Xoff&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ctrl-S和Ctrl-Q&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软件流量控制的方式（利用流控字符Xon和Xoff）&lt;/li&gt;&#xA;&lt;li&gt;终端希望主机暂停发送数据时，发Xoff字符&lt;/li&gt;&#xA;&lt;li&gt;终端希望主机继续发送数据时，发Xon字符&lt;/li&gt;&#xA;&lt;li&gt;Xoff/Xon控制字符分别被定义为ASCII码的17和19，对应键盘按键Ctrl-S和Ctrl-Q，手动流控&#xA;&lt;ul&gt;&#xA;&lt;li&gt;按下Ctrl-S键暂停显示，按Ctrl-Q键继续显示&lt;/li&gt;&#xA;&lt;li&gt;按下Ctrl-S后暂停显示，有的终端按任意键继续，而有的终端要求必须按下Ctrl-Q后才继续显示，否则其它按键都不能使得终端继续显示。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;仿真终端和虚拟终端&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仿真终端&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PC机串口，运行终端仿真软件来仿真终端。&lt;/li&gt;&#xA;&lt;li&gt;例如: DOS操作系统下的CrossTalk, Windows中的“超级终端”&lt;/li&gt;&#xA;&lt;li&gt;仿真的内容包括实现终端的转义码序列功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;虚拟终端&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX主机与PC机通过网络相连，客户端运行telnet，服务器端telnetd，成为UNIX的一个基于TCP通信的虚拟终端&lt;/li&gt;&#xA;&lt;li&gt;安全终端，在TCP连接上加密和压缩数据，如：Windows客户端软件SecureCRT&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-05-16%2010.09.28.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;登录&#xA;&lt;ul&gt;&#xA;&lt;li&gt;root用户（超级用户）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;root不受权限的制约，可随意修改和删除文件&lt;/li&gt;&#xA;&lt;li&gt;普通用户受权限制约&lt;/li&gt;&#xA;&lt;li&gt;root用户误删重要文件可能带来严重后果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;申请帐号（也叫登录名或用户名）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由系统管理员创建用户（如：useradd命令）&lt;/li&gt;&#xA;&lt;li&gt;用户从任意终端上登录进入系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;登录过程&#xA;&lt;ul&gt;&#xA;&lt;li&gt;出现登录提示符login：后，键入登录名&lt;/li&gt;&#xA;&lt;li&gt;给出提示password：输入口令，不回显&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Shell提示符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;登录成功&#xA;&lt;ul&gt;&#xA;&lt;li&gt;登录成功后出现Shell提示符，如同DOS的C&amp;gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;常见Shell的提示符&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$ Bourne Shell (/bin/sh)&lt;/li&gt;&#xA;&lt;li&gt;% C Shell (/bin/csh)&lt;/li&gt;&#xA;&lt;li&gt;$ Korn Shell (/bin/ksh)&lt;/li&gt;&#xA;&lt;li&gt;# 当前用户为超级用户root（操作时要小心）&lt;/li&gt;&#xA;&lt;li&gt;同DOS一样，Shell提示符可以根据用户的需要和喜好，通过Shell命令改变&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;关机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在关机前必须执行关机命令shutdown&#xA;&lt;ul&gt;&#xA;&lt;li&gt;突然关掉电源，可能会导致文件数据丢失&lt;/li&gt;&#xA;&lt;li&gt;例：内核的文件高速缓冲区。关机命令的功能之一是将高速缓冲区数据真正写到磁盘上&lt;/li&gt;&#xA;&lt;li&gt;仅特权用户有此权限&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;死机&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unix系统稳定，应用程序不该导致死机&lt;/li&gt;&#xA;&lt;li&gt;死机现象是由于系统内核态程序有问题，常常是一些外设的驱动程序有BUG&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
