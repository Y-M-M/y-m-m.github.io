<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法与数据结构 on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 算法与数据结构 on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Nov 2024 22:44:41 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数状数组</title>
      <link>https://y-m-m.github.io/post/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://y-m-m.github.io/post/%E6%95%B0%E7%8A%B6%E6%95%B0%E7%BB%84/&#34;&gt;相关 数状数组&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;线段树&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用来维护&lt;strong&gt;区间信息&lt;/strong&gt;的数据结构&lt;/li&gt;&#xA;&lt;li&gt;可以在O(logN)的时间复杂度内实现单点修改，区间修改，区间查询等操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;线段树是什么样的&#34;&gt;线段树是什么样的？&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-11-10%2022.25.40.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将每个长度不为1的区间划分成左右两个区间递归求解&lt;/li&gt;&#xA;&lt;li&gt;图中红色字体标明的区间，表示该节点管辖的位置区间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$d_i$的左儿子为$d_{2 * i}$，右儿子为$d_{2 * i + 1}$&#xA;$d_i$表示的区间是[s, t]，$d_{2 * i}$表示的区间是[s, $\frac{s + t}{2}$]，$d_{2 * i + 1}$表示的区间是$[\frac{s + t}{2} + 1, t]$&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;建树&#34;&gt;建树&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;递归&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 对 [s,t] 区间建立线段树,当前根的编号为 p&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 移位运算符的优先级小于加减法，所以加上括号&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 如果写成 (s + t) &amp;gt;&amp;gt; 1 可能会超出 int 范围&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 递归对左右区间建树&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;区间查询&#34;&gt;区间查询&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果要查询的区间是[l, r]，则可将其拆成至多O(logn)个极大的区间，合并即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// [l, r] 为查询区间, [s, t] 为当前节点包含的区间, p 为当前节点的编号&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 当前区间为询问区间的子集时直接返回当前区间的和&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 如果左儿子代表的区间 [s, m] 与询问区间有交集, 则递归查询左儿子&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 如果右儿子代表的区间 [m + 1, t] 与询问区间有交集, 则递归查询右儿子&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;区间修改&#34;&gt;区间修改&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;懒惰标记&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;修改区间[l, r]时，只修改节点并标记(懒惰标记)，而不修改其子节点&lt;/li&gt;&#xA;&lt;li&gt;等到下一次访问带有标记的节点时再进行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://oi-wiki.org/ds/seg/&#34;&gt;OI Wiki线段树&lt;/a&gt;&#xA;&lt;a href=&#34;https://www.cnblogs.com/RioTian/p/13409694.html&#34;&gt;博客 线段树&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>数状数组</title>
      <link>https://y-m-m.github.io/post/%E6%95%B0%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E6%95%B0%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;h1 id=&#34;数状数组&#34;&gt;数状数组&lt;/h1&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种支持单点修改和区间查询的代码量小的数据结构&#xA;普通数状数组维护的信息及运算要满足&lt;strong&gt;结合律&lt;/strong&gt;和&lt;strong&gt;可差分&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;什么是可差分？&#xA;  具有逆运算的运算，即已知x * y和x可以求出y&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;树状数组和线段树有什么区别？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;树状数组能解决的问题是线段树的子集，树状数组能做的，线段树一定可以，线段树能做的，树状数组不一定可以&lt;/li&gt;&#xA;&lt;li&gt;树状数组代码要远比线段树短，时间效率常数更小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;为什么要使用树状数组&#34;&gt;为什么要使用树状数组？&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.04.37.png&#34; alt=&#34;原数组&#34;&gt;  &lt;br&gt;&#xA;观察如图所示的数组，数组a长度为n    &lt;br&gt;&#xA;每次求前m项和的时间复杂度为O(n)，如果要反复求前m项和，需要花费太多时间。有没有什么办法能降低其时间复杂度呢？&lt;/p&gt;&#xA;&lt;p&gt;考虑&lt;strong&gt;前缀和数组&lt;/strong&gt;，数组中每个位置记录从a&lt;sub&gt;0&lt;/sub&gt;开始到这个位置的所有数字之和，每次想要求前m项和时只需将索引为m-1的数字取出来即可&lt;/p&gt;&#xA;&lt;p&gt;看起来很好，存在什么问题呢？     &lt;br&gt;&#xA;&lt;strong&gt;单点修改&lt;/strong&gt;太麻烦。每次只要a&lt;sub&gt;i&lt;/sub&gt;发生改变，前缀和数组中后续所有数字都需要改变。&lt;/p&gt;&#xA;&lt;p&gt;还有什么更好的办法吗？   &lt;br&gt;&#xA;可维护一个新的数据结构，如下&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.09.17.png&#34; alt=&#34;&#34;&gt; &lt;br&gt;&#xA;在这个数据结构中，若要计算所有数字之和，只需取最上面一层61即可，计算前三个数字之和只需要第二层(从下面数)的14与第一层的1即可，依次类推&lt;/p&gt;&#xA;&lt;p&gt;很容易就可以发现，每一行从下标0开始，1、3、5等奇数序号的数字在求前m项和时完全不会用到，无需额外存储&lt;/p&gt;&#xA;&lt;p&gt;去掉奇数项之后  &lt;br&gt;&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.18.19.png&#34; alt=&#34;剩下需要额外存储的数&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;为这些数字构建一个新的数组c &lt;br&gt;&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.19.16.png&#34; alt=&#34;所获新数组&#34;&gt;&lt;br&gt;&#xA;数组c就是树状数组，在树状数组中，可以很容易的完成单点修改、单点查询、区间修改、区间查询等操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;神奇的是，新数组的长度刚好为n&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;为什么呢？        &lt;br&gt;&#xA;(1 + 2 + 4 + 8 + &amp;hellip; + n/2) + 1 = n - 1 + 1 = n&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对n个数，取出n/2，从n/2开始加，每次加剩下的1/2，一直加到剩下的数字不可二分(1)为止，加上剩下的1就可以恢复原状，即n&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;观察树状数组&#34;&gt;观察树状数组&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2024-09-30%2021.51.07.png&#34; alt=&#34;树状数组样例&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;基本性质-管辖区间&#34;&gt;基本性质 管辖区间&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;很容易发现&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;树状数组元素&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;管辖区间&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c[1]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;[1&amp;hellip;1]&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c[2]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;[1&amp;hellip;2]&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c[3]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;[3&amp;hellip;3]&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;c[4]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;[1&amp;hellip;4]&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&amp;hellip;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;c[x]的管辖区间[x - lowbit(x) + 1, x]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lowbit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// x的二进制中，最低的1以及后面所有的0组成的数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;树形态的性质&#34;&gt;树形态的性质&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;l(x) = x - lowbit(x) + 1&#xA;x = s * 2&lt;sup&gt;k + 1&lt;/sup&gt; + 2 &lt;sup&gt;k&lt;/sup&gt;, lowbit(x) = 2&lt;sup&gt;k&lt;/sup&gt;&#xA;c[x]与c[y]的管辖范围不相交-&amp;gt;[l(x), x]与[l(y), y]不相交&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://y-m-m.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;绪论&#34;&gt;绪论&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cc常见问题&#34;&gt;C/C++常见问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;switch-case语句&#34;&gt;switch-case语句&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;switch之后的case遇到break才会停止&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;static的作用&#34;&gt;static的作用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态函数：只能在定义它的文件中使用&lt;/li&gt;&#xA;&lt;li&gt;静态变量：初始值为0，在程序运行期间一直存在&lt;/li&gt;&#xA;&lt;li&gt;静态代码块：只有在函数第一次被调用时才会运行&lt;/li&gt;&#xA;&lt;li&gt;缺省情况下全局可见&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;优先级&#34;&gt;优先级&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.的优先级高于*和-&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;[]的优先级高于*&lt;/li&gt;&#xA;&lt;li&gt;()的优先级高于*&lt;/li&gt;&#xA;&lt;li&gt;!=和==的优先级高于位运算&lt;/li&gt;&#xA;&lt;li&gt;算术运算的优先级高于位运算&lt;/li&gt;&#xA;&lt;li&gt;逗号在所有运算符中优先级最低&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;const和的不同位置表示的含义&#34;&gt;const和*的不同位置表示的含义&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;const在*之前(const int *a; int const *b)，指针所指对象只读&lt;/li&gt;&#xA;&lt;li&gt;const在*之后(int *const c;)，指针只读&lt;/li&gt;&#xA;&lt;li&gt;const在*之前和之后都有(const int * const d; int const *const e;)，指针和指针所指对象只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;传值传址传引用&#34;&gt;传值、传址、传引用&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传值：function(x)/void function(int x)&lt;/li&gt;&#xA;&lt;li&gt;传址：function(&amp;amp;x)/void function(int *x)&lt;/li&gt;&#xA;&lt;li&gt;传引用：function(x)/void function(int &amp;amp;x)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基本概念和术语&#34;&gt;基本概念和术语&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据：对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。&lt;/li&gt;&#xA;&lt;li&gt;数据元素：数据的基本单位，是数据结合中的一个个体，一个数据元素可由若干个数据项组成。&lt;/li&gt;&#xA;&lt;li&gt;数据对象：性质相同的数据元素的集合，是数据的一个子集。&lt;/li&gt;&#xA;&lt;li&gt;数据结构：相互之间存在一种或多种特定关系的数据元素的集合。&lt;/li&gt;&#xA;&lt;li&gt;数据结构：(D,S,Op)。其中D位数据元素的集合；S为D上的关系Op为定义在D上的运算&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;数据结构的分类&#34;&gt;数据结构的分类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集合&lt;/li&gt;&#xA;&lt;li&gt;线性结构&lt;/li&gt;&#xA;&lt;li&gt;树形结构&lt;/li&gt;&#xA;&lt;li&gt;图状结构或网状结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;逻辑结构&#34;&gt;逻辑结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据元素之间的逻辑关系&lt;/li&gt;&#xA;&lt;li&gt;(D, S)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;操作&#34;&gt;操作&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构造函数、析构函数&lt;/li&gt;&#xA;&lt;li&gt;询问类操作：判空、求长度&lt;/li&gt;&#xA;&lt;li&gt;查找类操作：查找某个元素的位置、遍历&lt;/li&gt;&#xA;&lt;li&gt;添加和删除类操作：添加一个数据元素、删除一个数据元素、置空&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;存储结构物理结构&#34;&gt;存储结构（物理结构）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据的逻辑结构在计算机存储器中的映像表示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据元素的映像&#34;&gt;数据元素的映像&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用二进制位的位串表示数据元素&lt;/li&gt;&#xA;&lt;li&gt;每个数据元素的映像称为结点&lt;/li&gt;&#xA;&lt;li&gt;每个数据项的映像称为数据域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;不同的存储结构&#34;&gt;不同的存储结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顺序存储结构&lt;/li&gt;&#xA;&lt;li&gt;链式存储结构&lt;/li&gt;&#xA;&lt;li&gt;哈希存储结构（散列存储结构）&lt;/li&gt;&#xA;&lt;li&gt;索引存储结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;刻画（程序）操作对象的特性&lt;/li&gt;&#xA;&lt;li&gt;原子类型&lt;/li&gt;&#xA;&lt;li&gt;结构类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;抽象数据类型adt&#34;&gt;抽象数据类型（ADT）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个数学模型以及定义在该模型上的一组操作&lt;/li&gt;&#xA;&lt;li&gt;原子类型&lt;/li&gt;&#xA;&lt;li&gt;固定聚合类型&lt;/li&gt;&#xA;&lt;li&gt;可变聚合类型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;算法的基本概念&#34;&gt;算法的基本概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;算法需要满足的特性&#34;&gt;算法需要满足的特性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有穷性、确定性、可行性、输入、输出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法设计自顶向下逐步求精&#34;&gt;算法设计：自顶向下、逐步求精&lt;/h3&gt;&#xA;&lt;h3 id=&#34;算法的评价标准&#34;&gt;算法的评价标准&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正确性&lt;/li&gt;&#xA;&lt;li&gt;可读性&lt;/li&gt;&#xA;&lt;li&gt;健壮性&lt;/li&gt;&#xA;&lt;li&gt;高效率与地存储量需求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法的后续测试&#34;&gt;算法的后续测试&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在算法中的某些部位插入时间函数time(t)测定算法完成某一功能所需要华为的时间(打印t)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算法的事前估计&#34;&gt;算法的事前估计&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;空间复杂度（原地工作：额外空间相对于输入数据量来说是常数）&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
