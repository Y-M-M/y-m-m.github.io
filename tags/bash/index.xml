<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on 陈皮的博客</title>
    <link>https://y-m-m.github.io/tags/bash/</link>
    <description>Recent content in Bash on 陈皮的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Apr 2025 11:18:17 +0800</lastBuildDate>
    <atom:link href="https://y-m-m.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux bash脚本及脚本程序设计</title>
      <link>https://y-m-m.github.io/post/linux_bash%E8%84%9A%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://y-m-m.github.io/post/linux_bash%E8%84%9A%E6%9C%AC%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;1-shell的基本机制&#34;&gt;1 shell的基本机制&lt;/h1&gt;&#xA;&lt;h2 id=&#34;关于shell&#34;&gt;关于shell&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell种类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;B-shell&lt;/li&gt;&#xA;&lt;li&gt;C-shell&lt;/li&gt;&#xA;&lt;li&gt;K-shell&lt;/li&gt;&#xA;&lt;li&gt;/bin/bash Linux上的标准shell&lt;/li&gt;&#xA;&lt;li&gt;管理员在创建用户时，设置了用户的登录shell&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;shell的功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell是命令解释器&lt;/li&gt;&#xA;&lt;li&gt;文件名替换，命令替换，变量替换&lt;/li&gt;&#xA;&lt;li&gt;历史替换&lt;/li&gt;&#xA;&lt;li&gt;别名替换&lt;/li&gt;&#xA;&lt;li&gt;流程控制的内部命令(内部命令和外部命令)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;shell的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要用途：批处理，执行效率比算法语言低&lt;/li&gt;&#xA;&lt;li&gt;shell编程风格和C语言等算法语言的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell是面向命令处理的语言，提供的流程控制结构通过对一些内部命令的解释实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如同C语言设计思路一样，shell本身设计的非常精炼，但是它提供了灵活的机制(策略与机制相分离)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shell有许多灵活的功能，通过shell替换实现&lt;/li&gt;&#xA;&lt;li&gt;例如：流程控制所需的条件判断，四则运算，都由shell之外的命令完成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;理解Unix的shell&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学习bash的目的&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在交互方式下：熟习shell的替换机制、转义机制，掌握循环等控制流程，可以编写符合命令&lt;/li&gt;&#xA;&lt;li&gt;非交互方式：编写shell脚本程序，把一系列操作，编纂成一个脚本文件，批量处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bash的启动&#34;&gt;bash的启动&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三种启动方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注册shell&lt;/li&gt;&#xA;&lt;li&gt;键入bash命令&lt;/li&gt;&#xA;&lt;li&gt;脚本解释器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自动执行的一批命令(用户偏好)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当bash作为注册shell被启动时，自动执行用户住目录下的.bash_profile文件中命令，~/.bash_profile或$HOME/.bash_profile&lt;/li&gt;&#xA;&lt;li&gt;当bash作为注册shell退出时：自动执行$HOME/.bash_logout&lt;/li&gt;&#xA;&lt;li&gt;当bash作为交互式shell启动时: 自动执行$HOME/.bashrc&lt;/li&gt;&#xA;&lt;li&gt;类似umask之类的命令，应当写在.profile文件中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;自动执行的一批命令（系统级）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当bash作为注册shell被启动时:自动执行 /etc/profile文件中命令&lt;/li&gt;&#xA;&lt;li&gt;当bash作为交互式shell启动时: 自动执行 /etc/bash.bashrc&lt;/li&gt;&#xA;&lt;li&gt;当bash作为注册shell退出时:自动执行/etc/bash.bash.logout&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脚本文件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑文件lsdir (格式为文本文件，文件名不必须为.sh后缀，只是个惯例)&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.37.26.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;脚本文件的执行&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新创建子进程，并在子进程中执行脚本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash&amp;lt;lsdir&lt;/li&gt;&#xA;&lt;li&gt;无法携带命令行参数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法二&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bash lsdir&lt;/li&gt;&#xA;&lt;li&gt;bash -x lsdir&lt;/li&gt;&#xA;&lt;li&gt;bash lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法三&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给文件设置可执行属性x：chmod u+x lsdir&lt;/li&gt;&#xA;&lt;li&gt;然后执行 ./lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;三种方法均启动程序/bin/bash，生成新进程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在当前shell中执行脚本&#xA;&lt;ul&gt;&#xA;&lt;li&gt;. lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;source lsdir /usr/lib/gcc&lt;/li&gt;&#xA;&lt;li&gt;脚本执行后对当前shell状态有影响&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;历史与别名&#34;&gt;历史与别名&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;历史表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先前键入的命令存在于历史表，编号递增，FIFO刷新&lt;/li&gt;&#xA;&lt;li&gt;历史表大小&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由变量HISTSIZE设定&lt;/li&gt;&#xA;&lt;li&gt;修改HISTSIZE的配置应放入~/.bashrc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看历史表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内部命令history&lt;/li&gt;&#xA;&lt;li&gt;文件 $HOME/.bash_history&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;历史替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人机交互时直接使用上下箭头键&lt;/li&gt;&#xA;&lt;li&gt;其他引用历史机制的方法&#xA;&lt;ul&gt;&#xA;&lt;li&gt;!! 引用上一命令&lt;/li&gt;&#xA;&lt;li&gt;!str 以str开头的最近用过的命令，如:!v !m !.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;别名和别名替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在别名表中增加一个别名(内部命令 alias)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;alias dir=&amp;ldquo;ls -flad&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;alias n=&amp;ldquo;netstat -p tcp -s | head -10&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;如果需要，应把alias命令放入.bashrc&lt;/li&gt;&#xA;&lt;li&gt;查看别名表alias&lt;/li&gt;&#xA;&lt;li&gt;取消别名(内部命令unalias)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;unalias n 在别名表中取消n&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TAB键补全&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每行的首个单词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TAB键补全搜索$PATH下的命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;行中的其它单词&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TAB键补全当前目录下的文件名&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;输入重定向&#34;&gt;输入重定向&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从数据文件中获取stdin &amp;lt;filename&lt;/li&gt;&#xA;&lt;li&gt;&amp;laquo; word 从shell脚本获取数据直到遇到定界符word（ 允许替换）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat &amp;laquo; TOAST&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Now : &lt;code&gt;date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;My Home Directory is $HOME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TOAST&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;定界符所界定内容加工处理(等同双引号处理): 变量替换，命令替换&lt;/li&gt;&#xA;&lt;li&gt;从shell中获得stdin：不许替换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cat &amp;laquo; &amp;lsquo;TOAST&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Now : &lt;code&gt;date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;My Home Directory is $HOME&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TOAST&lt;/li&gt;&#xA;&lt;li&gt;Pwd&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&amp;laquo;&amp;lt; word 从命令行获取信息作为标准输入&#xA;&lt;ul&gt;&#xA;&lt;li&gt;base64 &amp;laquo;&amp;lt; meiyoumima&lt;/li&gt;&#xA;&lt;li&gt;base64 &amp;laquo;&amp;lt; &amp;lsquo;mei you mi ma&amp;rsquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;输出重定向与管道&#34;&gt;输出重定向与管道&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序的标准输入/输出&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.54.39.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用系统调用(原始I/O)&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.56.32.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用库函数&#xA;&lt;img src=&#34;https://y-m-m.github.io/images/%E6%88%AA%E5%B1%8F2025-04-23%2017.59.44.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量名stdin, stdout, stderr用于C语言调用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;stdout输出重定向&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;filename 将stdout重定向到文件filename，文件已存在则先清空（覆盖方式）&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
